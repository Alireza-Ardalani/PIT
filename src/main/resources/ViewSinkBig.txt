<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.l: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.p: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.j: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.j: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.l: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.l: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.p: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.p: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.y: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<android.widget.EditText: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.EditText: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<com.androidplot.ui.widget.TextLabelWidget: java.lang.String getText()> -> _SOURCE_
<android.support.design.widget.CheckableImageButton: boolean isChecked()> -> _SOURCE_
<android.support.design.widget.CheckableImageButton: void toggle()> -> _SOURCE_
<android.support.v17.leanback.widget.CheckableImageView: boolean isChecked()> -> _SOURCE_
<android.support.v17.leanback.widget.CheckableImageView: void toggle()> -> _SOURCE_
<android.support.v7.internal.widget.AbsSpinnerCompat: android.view.View getSelectedView()> -> _SOURCE_
<android.support.v7.internal.widget.AbsSpinnerICS: android.view.View getSelectedView()> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat$DialogPopup: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat$a: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.view.menu.a: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.h: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.i: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.j: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.k: boolean isChecked()> -> _SOURCE_
<android.widget.AbsSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.AbsSeekBar: void onDraw(android.graphics.Canvas)> -> _SOURCE_
<android.widget.CheckBox: boolean isChecked()> -> _SOURCE_
<android.widget.CheckBox: void toggle()> -> _SOURCE_
<android.widget.CheckedTextView: boolean isChecked()> -> _SOURCE_
<android.widget.CheckedTextView: void toggle()> -> _SOURCE_
<android.widget.DatePicker: int getDayOfMonth()> -> _SOURCE_
<android.widget.DatePicker: int getMonth()> -> _SOURCE_
<android.widget.DatePicker: int getYear()> -> _SOURCE_
<android.widget.RadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<android.widget.Spinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Spinner: int getSelectedItemPosition()> -> _SOURCE_
<android.widget.Spinner: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.widget.Spinner: long getSelectedItemId()> -> _SOURCE_
<android.widget.Spinner: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.widget.Spinner: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SOURCE_
<android.widget.Switch: boolean isChecked()> -> _SOURCE_
<android.widget.Switch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Switch: void toggle()> -> _SOURCE_
<android.widget.TimePicker: int getHour()> -> _SOURCE_
<android.widget.TimePicker: int getMinute()> -> _SOURCE_
<android.widget.ToggleButton: boolean isChecked()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()> -> _SOURCE_
<androidx.appcompat.widget.SwitchCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SwitchCompat: void toggle()> -> _SOURCE_
<carbon.widget.AutoCompleteEditText: android.text.Editable getText()> -> _SOURCE_
<carbon.widget.AutoCompleteEditText: java.lang.CharSequence getText()> -> _SOURCE_
<carbon.widget.CheckBox: boolean isChecked()> -> _SOURCE_
<carbon.widget.CheckBox: void toggle()> -> _SOURCE_
<android.widget.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.NumberPicker: int getValue()> -> _SOURCE_
<android.widget.RadioButton: void toggle()> -> _SOURCE_
<android.widget.RadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<android.widget.RatingBar: float getRating()> -> _SOURCE_

<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: void <init>(android.content.Context)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.design.widget.TextInputEditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.design.widget.TextInputEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.design.widget.TextInputEditText: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatRadioButton: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: void <init>(android.content.Context)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,int)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.AbsSpinner: void <init>(android.content.Context)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,int)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.CheckBox: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintSpinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintCheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintRadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.switch: void <init>()> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_



<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.l: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.p: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.j: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.j: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.l: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.l: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.p: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.p: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.y: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<android.widget.EditText: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.EditText: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<com.androidplot.ui.widget.TextLabelWidget: java.lang.String getText()> -> _SOURCE_
<android.support.design.widget.CheckableImageButton: boolean isChecked()> -> _SOURCE_
<android.support.design.widget.CheckableImageButton: void toggle()> -> _SOURCE_
<android.support.v17.leanback.widget.CheckableImageView: boolean isChecked()> -> _SOURCE_
<android.support.v17.leanback.widget.CheckableImageView: void toggle()> -> _SOURCE_
<android.support.v7.internal.widget.AbsSpinnerCompat: android.view.View getSelectedView()> -> _SOURCE_
<android.support.v7.internal.widget.AbsSpinnerICS: android.view.View getSelectedView()> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat$DialogPopup: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat$a: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.view.menu.a: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.h: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.i: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.j: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.k: boolean isChecked()> -> _SOURCE_
<android.widget.AbsSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.AbsSeekBar: void onDraw(android.graphics.Canvas)> -> _SOURCE_
<android.widget.CheckBox: boolean isChecked()> -> _SOURCE_
<android.widget.CheckBox: void toggle()> -> _SOURCE_
<android.widget.CheckedTextView: boolean isChecked()> -> _SOURCE_
<android.widget.CheckedTextView: void toggle()> -> _SOURCE_
<android.widget.DatePicker: int getDayOfMonth()> -> _SOURCE_
<android.widget.DatePicker: int getMonth()> -> _SOURCE_
<android.widget.DatePicker: int getYear()> -> _SOURCE_
<android.widget.RadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<android.widget.Spinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Spinner: int getSelectedItemPosition()> -> _SOURCE_
<android.widget.Spinner: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.widget.Spinner: long getSelectedItemId()> -> _SOURCE_
<android.widget.Spinner: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.widget.Spinner: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SOURCE_
<android.widget.Switch: boolean isChecked()> -> _SOURCE_
<android.widget.Switch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Switch: void toggle()> -> _SOURCE_
<android.widget.TimePicker: int getHour()> -> _SOURCE_
<android.widget.TimePicker: int getMinute()> -> _SOURCE_
<android.widget.ToggleButton: boolean isChecked()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()> -> _SOURCE_
<androidx.appcompat.widget.SwitchCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SwitchCompat: void toggle()> -> _SOURCE_
<carbon.widget.AutoCompleteEditText: android.text.Editable getText()> -> _SOURCE_
<carbon.widget.AutoCompleteEditText: java.lang.CharSequence getText()> -> _SOURCE_
<carbon.widget.CheckBox: boolean isChecked()> -> _SOURCE_
<carbon.widget.CheckBox: void toggle()> -> _SOURCE_
<android.widget.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.NumberPicker: int getValue()> -> _SOURCE_
<android.widget.RadioButton: void toggle()> -> _SOURCE_
<android.widget.RadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<android.widget.RatingBar: float getRating()> -> _SOURCE_

<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: void <init>(android.content.Context)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.design.widget.TextInputEditText: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.design.widget.TextInputEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.design.widget.TextInputEditText: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatRadioButton: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.RadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintRadioButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: void <init>(android.content.Context)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: void <init>(android.content.Context,int)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.AbsSpinner: void <init>(android.content.Context)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources$Theme)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,int)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.Spinner: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.widget.AppCompatCheckBox: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatCheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.CheckBox: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.CheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.AutoCompleteTextView: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintEditText: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintSpinner: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintCheckBox: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.support.v7.internal.widget.TintRadioButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.support.v7.widget.switch: void <init>()> -> _SOURCE_
<android.widget.Switch: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _SOURCE_
<android.widget.ToggleButton: void <init>(android.content.Context,android.util.AttributeSet,int,int)> -> _SOURCE_

<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String, java.lang.Object[])> -> _SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri, android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri, java.lang.String, java.lang.String[])> -> _SINK_
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.HttpURLConnection: void setDoOutput(boolean)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)> -> _SINK_
<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> -> _SINK_
<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<okhttp3.Call: void enqueue(okhttp3.Callback)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> postData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> putData(@Body okhttp3.RequestBody)> -> _SINK_
<androidx.room.Dao: long insert(User)> -> _SINK_
<androidx.room.Dao: java.util.List<java.lang.Long> insertAll(User...)> -> _SINK_
<androidx.room.Dao: int update(User)> -> _SINK_
<androidx.room.Dao: int delete(User)> -> _SINK_
<androidx.room.Dao: long[] insertAll(java.util.List<User>)> -> _SINK_
<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> setValue(java.lang.Object)> -> _SINK_
<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> updateChildren(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.CollectionReference: com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentReference> add(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> set(java.util.Map<java.lang.String,java.lang.Object>, com.google.firebase.firestore.SetOptions)> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> update(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<io.realm.Realm: void insert(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void insertOrUpdate(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void insert(java.util.Collection<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void insertOrUpdate(java.util.Collection<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void executeTransaction(io.realm.Realm.Transaction)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: void execSQL(java.lang.String, java.lang.Object[])> -> _SINK_
<org.greenrobot.greendao.AbstractDao: long insert(T)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: void insertInTx(java.lang.Iterable<T>)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: void update(T)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: void delete(T)> -> _SINK_
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String, java.net.URL, java.net.Authenticator.RequestorType)> -> _SINK_
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String, java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)> -> _SINK_
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress, int, java.lang.String, java.lang.String, java.lang.String)> -> _SINK_
<java.net.CacheRequest: java.io.OutputStream getBody()> -> _SINK_
<java.net.CacheResponse: java.io.InputStream getBody()> -> _SINK_
<java.net.CacheResponse: java.util.Map getHeaders()> -> _SINK_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)> -> _SINK_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection, java.lang.Class[])> -> _SINK_
<java.net.CookieHandler: java.lang.Object getContent(java.net.URLConnection, java.lang.Class[])> -> _SINK_
<java.net.CookieHandler: java.util.Map get(java.net.URI, java.util.Map)> -> _SINK_
<java.net.CookieHandler: void put(java.net.URI, java.util.Map)> -> _SINK_
<java.net.CookieManager: void put(java.net.URI, java.util.Map)> -> _SINK_
<java.net.CookieManager: java.util.Map get(java.net.URI, java.util.Map)> -> _SINK_
<java.net.DatagramSocket: void close()> -> _SINK_
<java.net.DatagramSocket: void creteSocket(int, java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocket: int getReceiveBufferSize()> -> _SINK_
<java.net.DatagramSocket: int getSendBufferSize()> -> _SINK_
<java.net.DatagramSocket: int getSoTimeout()> -> _SINK_
<java.net.DatagramSocket: void recieve(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<java.net.DatagramSocket: void setSendBufferSize(int)> -> _SINK_
<java.net.DatagramSocket: void setRecieveBufferSize(int)> -> _SINK_
<java.net.DatagramSocket: void setSoTimeout(int)> -> _SINK_
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)> -> _SINK_
<java.net.DatagramSocketImpl: void bind(int, java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocketImpl: void close()> -> _SINK_
<java.net.DatagramSocketImpl: void create()> -> _SINK_
<java.net.DatagramSocketImpl: byte getTTL()> -> _SINK_
<java.net.DatagramSocketImpl: int getTimeToLive()> -> _SINK_
<java.net.DatagramSocketImpl: void join(java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress, java.net.NetworkInterface)> -> _SINK_
<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)> -> _SINK_
<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocketImpl: void recieve(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocketImpl: void setTimeToLive(int)> -> _SINK_
<java.net.DatagramSocketImpl: void setTTL(byte)> -> _SINK_
<java.net.DatagramSocketImpl: void connect(byte)> -> _SINK_
<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)> -> _SINK_
<java.net.HttpURLConnection: void disconnect()> -> _SINK_
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> -> _SINK_
<java.net.HttpURLConnection: java.security.Permission getPermission()> -> _SINK_
<java.net.HttpURLConnection: int getResponseCode()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getContentEncoding()> -> _SINK_
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String, long)> -> _SINK_
<java.net.Inet6Address: void readObject(java.io.ObjectInputStream)> -> _SINK_
<java.net.Inet6Address: void writeObject(java.io.ObjectOutputStream)> -> _SINK_
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> -> _SINK_
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String, byte[]. java.net.NetworkInterface)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String, byte[])> -> _SINK_
<java.net.InetAddress: java.lang.String getCanonicalHostName()> -> _SINK_
<java.net.InetAddress: java.lang.String getHostAddress()> -> _SINK_
<java.net.InetAddress: java.lang.String getHostName()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getLocalHost()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()> -> _SINK_
<java.net.InetAddress: boolean isReachable(int)> -> _SINK_
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface, int, int)> -> _SINK_
<java.net.InetAddress: boolean isSiteLocalAddress()> -> _SINK_
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String, int)> -> _SINK_
<java.net.InetSocketAddress: java.net.InetAddress getAddress()> -> _SINK_
<java.net.InetSocketAddress: java.lang.String getHostName()> -> _SINK_
<java.net.InetSocketAddress: java.lang.String getHostString()> -> _SINK_
<java.net.InetSocketAddress: int getPort()> -> _SINK_
<java.net.InetSocketAddress: boolean isUnresolved()> -> _SINK_

<java.net.JarURLConnection: java.util.jar.Attributes getAttributes()> -> _SINK_
<java.net.JarURLConnection: java.security.cert.Certificate[] getCertificates()> -> _SINK_
<java.net.JarURLConnection: java.util.jar.JarEntry getJarEntry()> -> _SINK_
<java.net.JarURLConnection: java.util.jar.Manifest getManifest()> -> _SINK_
<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()> -> _SINK_
<java.net.JarURLConnection: java.util.jar.Attributes getMainAttributes()> -> _SINK_
<java.net.JarURLConnection: java.lang.String getEntryName()> -> _SINK_
<java.net.MulticastSocket: java.net.InetAddress getInterface()> -> _SINK_
<java.net.MulticastSocket: boolean getLoopbackMode()> -> _SINK_
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()> -> _SINK_
<java.net.MulticastSocket: int getTimeToLive()> -> _SINK_
<java.net.MulticastSocket: int getTTL()> -> _SINK_
<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)> -> _SINK_
<java.net.MulticastSocket: void joinGroup(java.net.SocketAddress, java.net.NetworkInterface)> -> _SINK_
<java.net.MulticastSocket: void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface)> -> _SINK_
<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket, byte)> -> _SINK_
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)> -> _SINK_
<java.net.MulticastSocket: void setLoopbackMode(boolean)> -> _SINK_
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<java.net.MulticastSocket: void setTimeToLive(int)> -> _SINK_
<java.net.MulticastSocket: void setTTL(byte)> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.inetAddress)> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> -> _SINK_
<java.net.NetworkInterface: java.lang.String getDisplayName()> -> _SINK_
<java.net.NetworkInterface: byte[] getHardwareAddress()> -> _SINK_
<java.net.NetworkInterface: int getIndex()> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> -> _SINK_
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()> -> _SINK_
<java.net.NetworkInterface: java.lang.String getName()> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()> -> _SINK_
<java.net.NetworkInterface: int hashCode()> -> _SINK_
<java.net.NetworkInterface: boolean isLoopback()> -> _SINK_
<java.net.NetworkInterface: boolean isPointToPoint()> -> _SINK_
<java.net.NetworkInterface: boolean isUp()> -> _SINK_
<java.net.NetworkInterface: boolean isVirtual()> -> _SINK_
<java.net.NetworkInterface: boolean supportsMulticast()> -> _SINK_
<java.net.NetworkInterface: int getMTU()> -> _SINK_
<java.net.ProxySelector: void connectFailed(java.net.URI, java.net.SocketAddress, java.io.IOException)> -> _SINK_
<java.net.ResponseCache: java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map)> -> _SINK_
<java.net.ResponseCache: java.net.CacheRequest put(java.net.URI, java.net.URLConnection)> -> _SINK_
<java.net.SecureCacheResponse: java.lang.String getCipherSuite()> -> _SINK_
<java.net.SecureCacheResponse: java.util.List getLocalCertificateChain()> -> _SINK_
<java.net.SecureCacheResponse: java.util.List getServerCertificateChain()> -> _SINK_
<java.net.SecureCacheResponse: java.security.Principal getLocalPrincipal()> -> _SINK_
<java.net.SecureCacheResponse: java.security.Principal getPeerPrincipal()> -> _SINK_
<java.net.Serversocket: java.net.Socket accept()> -> _SINK_
<java.net.Serversocket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.Serversocket: void bind(java.net.SocketAddress, int)> -> _SINK_
<java.net.Serversocket: void close()> -> _SINK_
<java.net.Serversocket: java.nio.channels.ServerSocketChannel getChannel()> -> _SINK_
<java.net.Serversocket: java.net.InetAddress getInetAddress()> -> _SINK_
<java.net.Serversocket: int getLocalPort()> -> _SINK_
<java.net.Serversocket: int getReceiveBufferSize()> -> _SINK_
<java.net.Serversocket: boolean getReuseAddress()>  -> _SINK_
<java.net.Serversocket: boolean isBound()> -> _SINK_
<java.net.Serversocket: boolean isClosed()> -> _SINK_
<java.net.Serversocket: int getSoTimeout()> -> _SINK_
<java.net.Serversocket: void implAccept(java.net.Socket)> -> _SINK_
<java.net.Serversocket: void setPerformancePreferences(int, int, int)> -> _SINK_
<java.net.Serversocket: void setRecieveBufferSize(int)> -> _SINK_
<java.net.Serversocket: void setReuseAddress(boolean)>  -> _SINK_
<java.net.Serversocket: void setSocketFactory(java.net.SocketImplFactory)> -> _SINK_
<java.net.Serversocket: void setSoTimeout(int)>  -> _SINK_
<java.net.Serversocket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<java.net.Socket: void close()> -> _SINK_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SINK_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.Socket: boolean getKeepAlive()> -> _SINK_
<java.net.Socket: int getSoLinger()> -> _SINK_
<java.net.Socket: int getSoTimeout()> -> _SINK_
<java.net.Socket: boolean getTcpNoDelay()> -> _SINK_
<java.net.Socket: int getReceiveBufferSize()> -> _SINK_
<java.net.Socket: int getSendBufferSize()> -> _SINK_
<java.net.Socket: void setKeepAlive(boolean)> -> _SINK_
<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)> -> _SINK_
<java.net.Socket: void setSendBufferSize(int)> -> _SINK_
<java.net.Socket: void setReceiveBufferSize(int)> -> _SINK_
<java.net.Socket: void setSoTimeout(int)> -> _SINK_
<java.net.Socket: void setTcpNoDelay(boolean)> -> _SINK_
<java.net.Socket: void shutdownInput()> -> _SINK_
<java.net.Socket: void shutdownOutput()> -> _SINK_
<java.net.Socket: void setSoLinger(boolean, int)> -> _SINK_
<java.net.Socket: void setReuseAddress(boolean)> -> _SINK_
<java.net.Socket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress, int)> -> _SINK_
<java.net.Socket: boolean getReuseAddress()> -> _SINK_
<java.net.Socket: void setOOBInline(boolean)> -> _SINK_
<java.net.Socket: boolean getOOBInline()> -> _SINK_
<java.net.Socket: void setTrafficClass(int)> -> _SINK_
<java.net.Socket: int getTrafficClass()> -> _SINK_
<java.net.Socket: void sendUrgentData(int)> -> _SINK_
<java.net.SocketImpl: void setPerformancePreferences(int, int, int)> -> _SINK_
<java.net.SocketImpl: void sendUrgentData(int)> -> _SINK_
<java.net.SocketImpl: void connect(java.net.SocketAddress, int)> -> _SINK_
<java.net.SocketImpl: void shutdownOutput()> -> _SINK_
<java.net.SocketImpl: void shutdownInput()> -> _SINK_
<java.net.SocketImpl: void listen(int)> -> _SINK_
<java.net.SocketImpl: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.SocketImpl: java.io.InputStream getInputStream()> -> _SINK_
<java.net.SocketImpl: void create(boolean)> -> _SINK_
<java.net.SocketImpl: void connect(java.net.InetAddress, int)> -> _SINK_
<java.net.SocketImpl: void close()> -> _SINK_
<java.net.SocketImpl: void bind(java.net.InetAddress, int)> -> _SINK_
<java.net.SocketImpl: int available()> -> _SINK_
<java.net.SocketImpl: void accept(java.net.SocketImpl)> -> _SINK_
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.net.URLClassLoader: java.util.Enumeration findResources(java.lang.String)> -> _SINK_
<java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[])> -> _SINK_
<java.net.URLClassLoader: java.net.URLClassLoader newInstance(java.net.URL[], java.lang.ClassLoader)> -> _SINK_
<java.net.URLConnection: void connect()> -> _SINK_
<java.net.URLConnection: java.lang.Object getcontent()> -> _SINK_
<java.net.URLConnection: java.lang.Object getcontent(java.lang.Class[])> -> _SINK_
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderField()> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)> -> _SINK_
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String, int)> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderFieldDate()> -> _SINK_
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String, long)> -> _SINK_
<java.net.URLConnection: java.lang.String getExpiration()> -> _SINK_
<java.net.URLConnection: java.util.Map getHeaderFields()> -> _SINK_
<java.net.URLConnection: void addRequestProperty()> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.URLConnection: java.security.Permission getPermission()> -> _SINK_
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)> -> _SINK_
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.io.InputStream)> -> _SINK_
<java.net.URLConnection: java.util.Map getRequestProperties()> -> _SINK_
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> -> _SINK_
<java.net.URLConnection: void setAllowUserInteraction(boolean)> -> _SINK_
<java.net.URLConnection: void setDoInput(boolean)> -> _SINK_
<java.net.URLConnection: void setDoOutput(boolean)> -> _SINK_
<java.net.URLConnection: void setIfModifiedSince(long)> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String, java.lang.String)> -> _SINK_
<java.net.URLConnection: void setUseCaches(boolean)> -> _SINK_
<java.net.URLConnection: void setFileMap(java.net.FileNameMap)> -> _SINK_
<java.net.URLConnection: void setContentHandlerFactory(ContentHandlerFactory)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String, java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String, java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> -> _SINK_
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)> -> _SINK_
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL, java.net.Proxy)> -> _SINK_
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)> -> _SINK_

<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.io.File)> -> _SINK_
<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> -> _SINK_
<com.android.volley.toolbox.StringRequest: void <init>(int,java.lang.String,com.android.volley.Response$Listener,com.android.volley.Response$ErrorListener)> -> _SINK_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInvitationState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiManager: void save(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.LocalSocket: void setSoTimeout(int)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)> -> _SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallEgressDestRule(java.lang.String,int,boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)> -> _SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromDevice(android.net.wifi.WpsInfo)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter: void write(java.io.OutputStream)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceAdded(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProtocol(java.lang.String)> -> _SINK_
<android.net.SntpClient: boolean requestTime(java.lang.String,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)> -> _SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])> -> _SINK_
<android.net.http.Headers: void setEtag(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$L2ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> android.permission.READ_PHONE_STATE android.permission.BLUETOOTH android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE android.permission.CHANGE_NETWORK_STATE android.permission.BLUETOOTH_ADMIN android.permission.ACCESS_NETWORK_STATE -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)> -> _SINK_
<android.net.nsd.INsdManager$Stub$Proxy: void setEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setScanResultHandling(int)> -> _SINK_
<android.net.nsd.DnsSdTxtRecord: void set(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pSsidPostfix(java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ObtainingIpState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDialogListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DialogListener)> -> _SINK_
<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAutoRegistration(boolean)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)> -> _SINK_
<android.net.wifi.WifiSsid$1: android.net.wifi.WifiSsid createFromParcel(android.os.Parcel)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallUidRule(int,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void disable(int,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean disableNetwork(int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.IThrottleManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)> -> _SINK_
<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void handleMessage(android.os.Message)> -> _SINK_
<com.android.server.WifiService: void setCountryCode(java.lang.String,boolean)> android.permission.WRITE_SETTINGS android.permission.CHANGE_WIFI_STATE -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)> -> _SINK_
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE -> _SINK_
<android.net.sip.ISipSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> android.permission.INTERNET -> _SINK_
<android.net.MobileDataStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSink(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiApConfigStore$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setContentType(java.lang.String)> -> _SINK_
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setSoWriteTimeout(java.net.Socket,int)> -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pGroupIdle(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)> -> _SINK_
<com.android.server.WifiService: void startScan(boolean)> -> _SINK_
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void updateGroupCapability(java.lang.String,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,java.lang.String[])> -> _SINK_
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.rtp.AudioGroup: void add(android.net.rtp.AudioStream)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void advisePersistThreshold(long)> -> _SINK_
<android.net.wifi.WifiNative: boolean setWfdDeviceInfo(java.lang.String)> -> _SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean selectNetwork(int)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)> -> _SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)> -> _SINK_
<android.net.LinkCapabilities$1: android.net.LinkCapabilities createFromParcel(android.os.Parcel)> -> _SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)> -> _SINK_

<android.net.BaseNetworkStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> -> _SINK_
<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)> -> _SINK_
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager$ServiceHandler: void handleMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setSessionAvailable(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean setDeviceType(int)> -> _SINK_
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.net.NetworkStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingJoinState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)> -> _SINK_
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void startReverseTethering(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> -> _SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setSerialNumber(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.EthernetDataTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.INetworkStatsSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$BssidStatistics: void updateLoss(int,double,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_NETWORK_STATE -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSource(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])> -> _SINK_
<com.android.server.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)> -> _SINK_
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)> -> _SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)> -> _SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.net.nsd.NsdManager: void setEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiApConfigStore$ActiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> -> _SINK_
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroupList: void add(android.net.wifi.p2p.WifiP2pGroup)> -> _SINK_
<android.net.CaptivePortalTracker$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void write(java.io.OutputStream)> -> _SINK_
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)> -> _SINK_
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)> -> _SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<com.android.server.WifiService: boolean setWifiEnabled(boolean)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverUnloadingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager$ResolveListener)> -> _SINK_
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceLinkStateChanged(java.lang.String,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setTxtRecord(android.net.nsd.DnsSdTxtRecord)> -> _SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStoppingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.BaseNetworkStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$FrequencyConflictState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setScanType(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setConfigMethods(java.lang.String)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void limitReached(java.lang.String,java.lang.String)> -> _SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.net.wifi.WifiNative: boolean setModelNumber(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: void setIpConfiguration(int,android.net.DhcpInfoInternal)> -> _SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager$WpsListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)> -> _SINK_
<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> android.permission.STOP_APP_SWITCHES -> _SINK_
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_NETWORK_STATE -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.BaseNetworkStateTracker: void setPolicyDataEnable(boolean)> -> _SINK_
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.ACCESS_NETWORK_STATE -> _SINK_
<android.net.MobileDataStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetworkWithoutBroadcast(int,boolean)> -> _SINK_
<android.net.http.Headers: void setLocation(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: void setScanInterval(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> android.permission.CHANGE_NETWORK_STATE -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void updateStatus(java.lang.String,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> -> _SINK_
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> android.permission.WRITE_SETTINGS -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> android.permission.STOP_APP_SWITCHES -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.AndroidHttpClient$LoggingConfiguration: void access$600(android.net.http.AndroidHttpClient$LoggingConfiguration,java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)> -> _SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)> -> _SINK_
<com.android.server.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> android.permission.CHANGE_WIFI_STATE -> _SINK_
<android.net.wifi.WifiNative: boolean setConcurrencyPriority(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.LocalSocket: void setSendBufferSize(int)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.net.NetworkStatsCollection: void write(java.io.DataOutputStream)> -> _SINK_
<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)> -> _SINK_
<android.net.wifi.WifiConfigStore: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceThrottle(java.lang.String,int,int)> -> _SINK_
<android.net.InterfaceConfiguration: void setFlag(java.lang.String)> -> _SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> -> _SINK_
<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)> -> _SINK_
<com.android.server.NetworkManagementService: void setDnsForwarders(java.lang.String[])> -> _SINK_
<android.net.BaseNetworkStateTracker: void setDependencyMet(boolean)> -> _SINK_
<android.net.CaptivePortalTracker$ActiveNetworkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setExpires(java.lang.String)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceRemoved(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setCountryCode(java.lang.String)> -> _SINK_
<android.net.BaseNetworkStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.WifiApConfigStore$InactiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.DhcpStateMachine$StoppedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> -> _SINK_
<android.net.CaptivePortalTracker$NoActiveNetworkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager$DiscoveryListener)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> android.permission.CHANGE_WIFI_STATE android.permission.ACCESS_WIFI_STATE -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> android.permission.CHANGE_NETWORK_STATE -> _SINK_
<android.net.DhcpStateMachine$WaitBeforeStartState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setModelName(java.lang.String)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceStatusChanged(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverLoadingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setP2pPowerSave(java.lang.String,boolean)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.EthernetDataTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromHex(java.lang.String)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: void forget(int,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$WpsRunningState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> -> _SINK_
<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)> -> _SINK_
<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)> -> _SINK_
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPort(int)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiNative: boolean setWfdEnable(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setProfileName(java.lang.String)> -> _SINK_
<android.net.nsd.INsdManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> -> _SINK_
<com.android.providers.settings.SettingsBackupAgent$WifiNetworkSettings: void write(java.io.Writer)> -> _SINK_
<android.net.DummyDataStateTracker: boolean setRadio(boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: boolean processMessage(android.os.Message)> -> _SINK_

<android.net.wifi.WifiNative: boolean setBand(int)> -> _SINK_
<android.net.wifi.WifiNative: void setPowerSave(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsPbc(android.net.wifi.WpsInfo)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)> -> _SINK_
<android.net.wifi.WifiNative: boolean setScanMode(boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)> -> _SINK_
<com.android.server.NetworkManagementService: void setFirewallEgressSourceRule(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.net.INetworkManagementEventObserver$Stub$Proxy: void interfaceClassDataActivityChanged(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(android.net.wifi.WpsInfo)> -> _SINK_
<android.net.wifi.WifiStateMachine$DriverFailedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)> -> _SINK_
<android.net.wifi.WifiNative: boolean setManufacturer(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager$ActionListener)> -> _SINK_
<com.android.server.NetworkManagementService: void setGlobalAlert(long)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)> -> _SINK_
<com.android.server.WifiService: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: boolean processMessage(android.os.Message)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)> -> _SINK_
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanMode(boolean)> -> _SINK_
<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)> -> _SINK_
<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)> -> _SINK_
<java.io.File: boolean delete()> -> _SINK_
<org.apache.xalan.xsltc.runtime.BasisLibrary: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)> -> _SINK_
<org.apache.axis2.description.AxisService: void printWSDLError(java.io.OutputStream)> -> _SINK_
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(char[])> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)> -> _SINK_
<net.sourceforge.pebble.domain.Comment: void setAuthenticated(boolean)> -> _SINK_

<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)> -> _SINK_
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void runAfterTransactionMethods(org.springframework.test.context.TestContext)> -> _SINK_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl()> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServlet: void log(java.lang.String)> -> _SINK_
<org.apache.stratos.cli.StratosApplication: int run(java.lang.String[])> -> _SINK_
<org.owasp.webgoat.session.ParameterParser: void update(javax.servlet.ServletRequest)> -> _SINK_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence)> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)> -> _SINK_
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> -> _SINK_
<org.apache.bcel.util.JavaWrapper: void runMain(java.lang.String,java.lang.String[])> -> _SINK_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.Object parse(java.lang.String,java.util.Locale)> -> _SINK_
<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.owasp.webgoat.session.DatabaseUtilities: java.sql.Connection getHsqldbConnection(java.lang.String,org.owasp.webgoat.session.WebgoatContext)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)> -> _SINK_
<org.springframework.mock.web.MockBodyContent: void println(java.lang.String)> -> _SINK_
<org.owasp.webgoat.HammerHead: void log(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SINK_
<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<org.owasp.webgoat.session.LessonSession: void setAuthenticated(boolean)> -> _SINK_
<org.springframework.orm.hibernate3.support.ClobStringType: int[] sqlTypes()> -> _SINK_
<org.owasp.webgoat.session.WebSession: void update(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)> -> _SINK_
<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)> -> _SINK_
<com.novell.ldap.rfc2251.RfcFilter: void addSubstring(int,byte[])> -> _SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)> -> _SINK_
<org.xmldb.api.base.XMLDBException: void printStackTrace(java.io.PrintWriter)> -> _SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)> -> _SINK_
<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)> -> _SINK_
<org.apache.xalan.xsltc.compiler.util.Util: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<org.apache.commons.validator.util.ValidatorUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<com.google.json.JsonSanitizer: void replace(int,int,java.lang.String)> -> _SINK_
<org.owasp.esapi.reference.validation.StringValidationRule: void addBlacklistPattern(java.util.regex.Pattern)> -> _SINK_
<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence,int,int)> -> _SINK_

<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)> -> _SINK_
<org.springframework.security.util.FieldUtils: void setProtectedFieldValue(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.springframework.mock.web.MockBodyContent: void println(char[])> -> _SINK_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)> -> _SINK_
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)> -> _SINK_
<org.springframework.orm.hibernate3.TypeDefinitionBean: void setParameters(java.util.Properties)> -> _SINK_
<org.springframework.format.datetime.joda.DateTimeParser: org.joda.time.DateTime parse(java.lang.String,java.util.Locale)> -> _SINK_

<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)> -> _SINK_
<org.springframework.mock.web.MockJspWriter: void println(java.lang.String)> -> _SINK_
<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> -> _SINK_
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SINK_
<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)> -> _SINK_
<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)> -> _SINK_
<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])> -> _SINK_
<java.lang.Runtime: java.lang.Process exec(java.lang.String)> -> _SINK_
<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)> -> _SINK_
<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)> -> _SINK_
<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)> -> _SINK_
<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)> -> _SINK_
<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _SINK_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _SINK_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _SINK_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _SINK_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _SINK_
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _SINK_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _SINK_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.net.URL: void <init>(java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _SINK_








<android.preference.TwoStatePreference: boolean isChecked()> -> _SOURCE_
<android.support.design.widget.BottomNavigationView: int getSelectedItemId()> -> _SOURCE_
<android.support.design.widget.CheckableImageButton: boolean isChecked()> -> _SOURCE_
<android.support.design.widget.CheckableImageButton: void toggle()> -> _SOURCE_
<android.support.design.widget.CollapsingTextHelper: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.design.widget.CoordinatorLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.design.widget.FloatingActionButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.design.widget.TabLayout$Tab: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.design.widget.TabLayout$e: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v14.preference.MultiSelectListPreference: boolean[] getSelectedItems()> -> _SOURCE_
<android.support.v17.leanback.widget.CheckableImageView: boolean isChecked()> -> _SOURCE_
<android.support.v17.leanback.widget.CheckableImageView: void toggle()> -> _SOURCE_
<android.support.v4.widget.BottomSwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.DrawerLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.NestedScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.SlidingPaneLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.SwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.ab: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.al: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.ao: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.cz: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.f: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.g: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.h: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.i: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.j: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.m: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.o: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.q: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.s: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v4.widget.z: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.view.menu.ActionMenuItem: boolean isChecked()> -> _SOURCE_
<android.support.v7.internal.widget.AbsActionBarView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.AbsSpinnerCompat: android.view.View getSelectedView()> -> _SOURCE_
<android.support.v7.internal.widget.AbsSpinnerICS: android.view.View getSelectedView()> -> _SOURCE_
<android.support.v7.internal.widget.ActionBarContainer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.ActionBarContextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.AdapterViewCompat: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.internal.widget.AdapterViewICS: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.internal.widget.ListPopupWindow: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.internal.widget.ListViewCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat$DialogPopup: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat$a: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerCompat: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerICS$DialogPopup: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.SpinnerICS: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.support.v7.internal.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.aa: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.f: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.internal.widget.p: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.internal.widget.w: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.preference.CheckBoxPreference$Listener: void onCheckedChanged(android.widget.CompoundButton,boolean)> -> _SOURCE_
<android.support.v7.preference.TwoStatePreference: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.ActionMenuItem: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.MenuItemImpl: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.MenuItemWrapperICS: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.a: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.h: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.i: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.j: boolean isChecked()> -> _SOURCE_
<android.support.v7.view.menu.k: boolean isChecked()> -> _SOURCE_
<android.support.v7.widget.AbsActionBarView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ActionBarContainer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ActionBarContextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.AppCompatEditText: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.AppCompatSpinner: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.support.v7.widget.AppCompatTextView: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.DropDownListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ListPopupWindow: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.support.v7.widget.ListPopupWindow: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.widget.ListViewCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.MenuPopupWindow$MenuDropDownListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.MenuPopupWindow$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.RecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$$$$$$$: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$Eo: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$UpdatableTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$b: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$c: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$e: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$f: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SearchView$new: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SwitchCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.SwitchCompat: java.lang.CharSequence getTextOff()> -> _SOURCE_
<android.support.v7.widget.SwitchCompat: java.lang.CharSequence getTextOn()> -> _SOURCE_
<android.support.v7.widget.SwitchCompat: void toggle()> -> _SOURCE_
<android.support.v7.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.aa: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ab$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ab: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ac$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ad: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ae: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.af$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.af: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ag: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ah$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ah: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ai$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ai: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.aj: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ak$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ak: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.al$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.al: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.am: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.an: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ao$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ao: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.ao: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ao: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.ap: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.aq$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.aq: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ar$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.as$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.as: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.at$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.at: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.au$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.au: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.av$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.av: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.aw$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.aw: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ax$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ax: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ay$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ay: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.az: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ba: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bb: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bb: void toggle()> -> _SOURCE_
<android.support.v7.widget.bc: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bd: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.bf: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bf: void toggle()> -> _SOURCE_
<android.support.v7.widget.bh: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bh: void toggle()> -> _SOURCE_
<android.support.v7.widget.bi: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bi: void toggle()> -> _SOURCE_
<android.support.v7.widget.bj: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bj: void toggle()> -> _SOURCE_
<android.support.v7.widget.bk: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bk: void toggle()> -> _SOURCE_
<android.support.v7.widget.bm: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bm: void toggle()> -> _SOURCE_
<android.support.v7.widget.bu: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bw: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.bz: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.cb: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.cg: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.cm: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.cs: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.ct: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.cz: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.db: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.db: void toggle()> -> _SOURCE_
<android.support.v7.widget.de: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.de: void toggle()> -> _SOURCE_
<android.support.v7.widget.dh: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.do: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.dp: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.dq: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.eh: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.fa: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.fo: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.gl: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.gx: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.k: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.k: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.l: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.l: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.m: android.text.Editable getText()> -> _SOURCE_
<android.support.v7.widget.m: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.m: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.mq: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.n: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.o: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.p: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.q: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.r: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.t: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.u: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.v: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.v: long getSelectedItemId()> -> _SOURCE_
<android.support.v7.widget.w: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.w: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.x: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.y: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.y: java.lang.CharSequence getText()> -> _SOURCE_
<android.support.v7.widget.z: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.support.v7.widget.z: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.AbsSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.AbsSeekBar: void onDraw(android.graphics.Canvas)> -> _SOURCE_
<android.widget.AbsSpinner: android.view.View getSelectedView()> -> _SOURCE_
<android.widget.AdapterView: int getSelectedItemPosition()> -> _SOURCE_
<android.widget.AdapterView: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.widget.AdapterView: long getSelectedItemId()> -> _SOURCE_
<android.widget.AdapterViewAnimator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.AutoCompleteTextView: android.text.Editable getText()> -> _SOURCE_
<android.widget.CheckBox: boolean isChecked()> -> _SOURCE_
<android.widget.CheckBox: void toggle()> -> _SOURCE_
<android.widget.CheckableLinearLayout: boolean isChecked()> -> _SOURCE_
<android.widget.CheckableLinearLayout: void toggle()> -> _SOURCE_
<android.widget.CheckableTextView: boolean isChecked()> -> _SOURCE_
<android.widget.CheckableTextView: void toggle()> -> _SOURCE_
<android.widget.CheckedTextView: boolean isChecked()> -> _SOURCE_
<android.widget.CheckedTextView: void toggle()> -> _SOURCE_
<android.widget.CompoundButton: boolean isChecked()> -> _SOURCE_
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<android.widget.CompoundButton: void toggle()> -> _SOURCE_
<android.widget.DatePicker: int getDayOfMonth()> -> _SOURCE_
<android.widget.DatePicker: int getMonth()> -> _SOURCE_
<android.widget.DatePicker: int getYear()> -> _SOURCE_
<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<android.widget.EditText: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.EditText: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<android.widget.Gallery: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.HorizontalScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.ListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.MediaController: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.MultiAutoCompleteTextView: android.text.Editable getText()> -> _SOURCE_
<android.widget.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.NumberPicker: int getValue()> -> _SOURCE_
<android.widget.RadioButton: void toggle()> -> _SOURCE_
<android.widget.RadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<android.widget.RatingBar: float getRating()> -> _SOURCE_
<android.widget.ScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.SearchView: java.lang.CharSequence getQuery()> -> _SOURCE_
<android.widget.SeekBar: int getProgress()> -> _SOURCE_
<android.widget.SlidingDrawer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.SlidingDrawer: void toggle()> -> _SOURCE_
<android.widget.Spinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Spinner: int getSelectedItemPosition()> -> _SOURCE_
<android.widget.Spinner: java.lang.Object getSelectedItem()> -> _SOURCE_
<android.widget.Spinner: long getSelectedItemId()> -> _SOURCE_
<android.widget.Spinner: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<android.widget.Spinner: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _SOURCE_
<android.widget.StackView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Switch: boolean isChecked()> -> _SOURCE_
<android.widget.Switch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.Switch: void toggle()> -> _SOURCE_
<android.widget.SwitchCompat: boolean isChecked()> -> _SOURCE_
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.TextView: java.lang.CharSequence getText()> -> _SOURCE_
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<android.widget.TiVideoView8: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.TimePicker: int getHour()> -> _SOURCE_
<android.widget.TimePicker: int getMinute()> -> _SOURCE_
<android.widget.ToggleButton: boolean isChecked()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()> -> _SOURCE_
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()> -> _SOURCE_
<android.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.VideoView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.ZoomButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<android.widget.ZoomControls: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.AbsActionBarView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.ActionBarContainer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.ActionBarContextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatCheckBox: boolean isChecked()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatCheckBox: void toggle()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRadioButton: boolean isChecked()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatRatingBar: float getRating()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: int getSelectedItemPosition()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatSpinner: java.lang.Object getSelectedItem()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatTextView: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.AppCompatToggleButton: boolean isChecked()> -> _SOURCE_
<androidx.appcompat.widget.C: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.DropDownListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.I: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.ListPopupWindow: long getSelectedItemId()> -> _SOURCE_
<androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.N: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SearchView$UpdatableTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SearchView$c: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SearchView$f: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SwitchCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.SwitchCompat: void toggle()> -> _SOURCE_
<androidx.appcompat.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.V$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.ad$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.ad: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.aj$a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.h: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.j: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.j: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.l: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.l: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.p: android.text.Editable getText()> -> _SOURCE_
<androidx.appcompat.widget.p: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.appcompat.widget.w: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.x: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.appcompat.widget.y: java.lang.CharSequence getText()> -> _SOURCE_
<androidx.constraintlayout.motion.widget.MotionLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.coordinatorlayout.widget.CoordinatorLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.core.widget.NestedScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.drawerlayout.widget.DrawerLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.preference.CheckBoxPreference: boolean isChecked()> -> _SOURCE_
<androidx.preference.MultiSelectListPreference: java.util.Set getValues()> -> _SOURCE_
<androidx.preference.SwitchPreferenceCompat: boolean isChecked()> -> _SOURCE_
<androidx.recyclerview.widget.D: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.recyclerview.widget.RecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.slidingpanelayout.widget.SlidingPaneLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.swiperefreshlayout.widget.SwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.viewpager.widget.PagerTabStrip: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<androidx.viewpager.widget.ViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_

<carbon.widget.AutoCompleteEditText: android.text.Editable getText()> -> _SOURCE_
<carbon.widget.AutoCompleteEditText: java.lang.CharSequence getText()> -> _SOURCE_
<carbon.widget.CheckBox: boolean isChecked()> -> _SOURCE_
<carbon.widget.CheckBox: void toggle()> -> _SOURCE_
<carbon.widget.Chip: java.lang.String getText()> -> _SOURCE_
<carbon.widget.DropDown$c: boolean isChecked()> -> _SOURCE_
<carbon.widget.DropDown$c: void toggle()> -> _SOURCE_
<carbon.widget.DropDown: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<carbon.widget.RadioButton: boolean isChecked()> -> _SOURCE_
<carbon.widget.RadioButton: void toggle()> -> _SOURCE_
<carbon.widget.RangeSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<carbon.widget.ScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<carbon.widget.SearchEditText: android.text.Editable getText()> -> _SOURCE_
<carbon.widget.SearchEditText: java.lang.CharSequence getText()> -> _SOURCE_
<carbon.widget.SeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<carbon.widget.Snackbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<carbon.widget.Toolbar: java.lang.String getText()> -> _SOURCE_
<cc.dreamspark.intervaltimer.widgets.FloatingActionButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.dreamspark.intervaltimer.widgets.FloatingTextButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.common.widgets.CircleImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.cardioworkoutplan.widget.VerticalProgressBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.cardioworkoutplan.widget.WorkoutViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.common.widget.HorizontalListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.common.widget.NonScrollableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.common.widget.OnTouchFixedViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.common.widget.SlidingUpPanelLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cc.pacer.androidapp.ui.common.widget.TrendChartIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.finalteam.galleryfinal.widget.HorizontalListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.finalteam.galleryfinal.widget.crop.CropImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.finalteam.galleryfinal.widget.zoonview.CupcakeGestureDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.finalteam.galleryfinal.widget.zoonview.EclairGestureDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.finalteam.galleryfinal.widget.zoonview.FroyoGestureDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.imengya.basic.widget.DividerRadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<cn.imengya.basic.widget.DividerRadioGroup: void setOnCheckedChangeListener(cn.imengya.basic.widget.DividerRadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<cn.imengya.basic.widget.RulerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cn.qqtheme.framework.widget.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.PerfectServe.lib.widget.PSListViewIndex: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.PerfectServe.lib.widget.PinchViewImage: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.PerfectServe.lib.widget.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.PerfectServe.lib.widget.calendar.CalendarDay: int getMonth()> -> _SOURCE_
<com.PerfectServe.lib.widget.calendar.CalendarDay: int getYear()> -> _SOURCE_
<com.PerfectServe.lib.widget.calendar.CalendarPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.PerfectServe.lib.widget.calendar.CalendarUtils: int getYear(java.util.Calendar)> -> _SOURCE_
<com.abdula.pranabreath.view.components.div.SetSafeSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.actionbarsherlock.internal.widget.ActionBarContainer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.actionbarsherlock.internal.widget.IcsAdapterView: long getSelectedItemId()> -> _SOURCE_
<com.actionbarsherlock.internal.widget.IcsSpinner: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<com.agamatrix.nimbus.shared.widgets.LinkableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.agamatrix.nimbus.shared.widgets.PagerContainer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.agamatrix.nimbus.shared.widgets.swipemenulistview.SwipeMenuListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.agmostudio.uiwidget.PullToRefreshBase: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.aigestudio.wheelpicker.widgets.WheelDatePicker: int getMonth()> -> _SOURCE_
<com.aigestudio.wheelpicker.widgets.WheelDatePicker: int getYear()> -> _SOURCE_
<com.americanwell.android.member.widget.CheckableRelativeLayout: boolean isChecked()> -> _SOURCE_
<com.americanwell.android.member.widget.CheckableRelativeLayout: void toggle()> -> _SOURCE_
<com.americanwell.android.member.widget.ExpandableTextView: java.lang.CharSequence getText()> -> _SOURCE_
<com.amphetamobile.chest.ui.activity.widgets.IndexScroller: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.amphetamobile.chest.ui.activity.widgets.IndexableListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.droidinfinity.commonutilities.widgets.pickers.date.s: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.droidinfinity.commonutilities.widgets.pickers.image.CropOverlayView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.widgets.CustomEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.widgets.EmailInsertView: boolean isChecked()> -> _SOURCE_
<com.android.widgets.HorizontalListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.widgets.PaperButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.widgets.ScrollViewCustom: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.widgets.SemiClosedSlidingDrawer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.android.widgets.SemiClosedSlidingDrawer: void toggle()> -> _SOURCE_
<com.android.widgets.combobox.AutoCompleteOrTextView: java.lang.String getText()> -> _SOURCE_
<com.androidplot.ui.widget.TextLabelWidget: java.lang.String getText()> -> _SOURCE_
<com.anytimefitness.app.widget.CheckedIconTextView: boolean isChecked()> -> _SOURCE_
<com.anytimefitness.app.widget.CheckedIconTextView: void toggle()> -> _SOURCE_
<com.anytimefitness.app.widget.PageNavigatorView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.anytimefitness.app.widget.SpinnerWithDefault: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.anytimefitness.app.widget.StickyNestedScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.anytimefitness.app.widget.StickyScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.anytimefitness.app.widget.StreakButtonView: boolean isChecked()> -> _SOURCE_
<com.anytimefitness.app.widget.StreakButtonView: void toggle()> -> _SOURCE_
<com.anytimefitness.app.widget.VersionNumberView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.appvisionaire.framework.screenbase.widget.CheckableImageView: boolean isChecked()> -> _SOURCE_
<com.appvisionaire.framework.screenbase.widget.CheckableImageView: void toggle()> -> _SOURCE_
<com.azumio.android.argus.widget.NonSwipableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.azurechen.fcalendar.widget.FlexibleCalendar: int getMonth()> -> _SOURCE_
<com.azurechen.fcalendar.widget.FlexibleCalendar: int getYear()> -> _SOURCE_
<com.b1.b2.b3.material.widget.Slider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.babelbark.widgets.AdvancedViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.babelbark.widgets.BetterSpinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.babelbark.widgets.NiceAutoCompleteTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.blinkhealth.blinkandroid.widgets.checkout.ListenerAwareCheckBox: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.blinkhealth.blinkandroid.widgets.checkout.ListenerAwareCheckBox: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener,boolean)> -> _SOURCE_
<com.blinkhealth.blinkandroid.widgets.views.CustomPagingViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.blinkhealth.blinkandroid.widgets.views.NonSwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bodybuilding.checkout.widget.EditText: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<com.bodybuilding.checkout.widget.EditTextWithTopMessage: java.lang.String getText()> -> _SOURCE_
<com.bodybuilding.checkout.widget.InertCheckBox: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bruxlabsnore.widgets.CustomButtonResizable: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bruxlabsnore.widgets.EditTextPreferenceEx: java.lang.String getText()> -> _SOURCE_
<com.bruxlabsnore.widgets.LockableScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bruxlabsnore.widgets.SlidingSwitch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bruxlabsnore.widgets.ViewPagerEx: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bruxlabsnore.widgets.b: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bsc.bsca.cem.ui.widget.NonSwipableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.bsc.bsca.cem.ui.widget.chart.PieRadarChartBase: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.c25k.reboot.view.CustomSoundSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.calm.android.ui.SettingsButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.camerasideas.baseutils.widget.DragFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.baseutils.widget.FloatingActionButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.baseutils.widget.FloatingActionMenu: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.baseutils.widget.Label: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.baseutils.widget.VerticalViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.collagemaker.activity.widget.CirclePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.collagemaker.activity.widget.EditLayoutView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.collagemaker.activity.widget.RookieTipsView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.collagemaker.activity.widget.RotateScaleBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.camerasideas.collagemaker.activity.widget.StartPointSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.chad.library.adapter.base.BaseViewHolder: com.chad.library.adapter.base.BaseViewHolder setOnCheckedChangeListener(int,android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.charitymilescm.android.widget.LetterSpacingButton: java.lang.CharSequence getText()> -> _SOURCE_
<com.charitymilescm.android.widget.LetterSpacingTextView: java.lang.CharSequence getText()> -> _SOURCE_
<com.charitymilescm.android.widget.MyScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.charitymilescm.android.widget.NonSwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.charitymilescm.android.widget.ObservableScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.charitymilescm.android.widget.actionsheet.ActionSheetItem: java.lang.String getText()> -> _SOURCE_
<com.charitymilescm.android.widget.viewFlipper.IntroViewFlipper: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.BedsideClockView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.CustomClockView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.CustomRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.ExpandedViewPagerLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.Indicator.CirclePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.Indicator.LinePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.Indicator.UnderlinePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.TimeSelectView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.TimeSelectView: int getMinute()> -> _SOURCE_
<com.clockai.alarmclock.widget.animation.ColorfulLampView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.numberpicker.CustomNumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.numberpicker.CustomNumberPicker: int getValue()> -> _SOURCE_
<com.clockai.alarmclock.widget.switchbutton.SwitchButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.clockai.alarmclock.widget.switchbutton.SwitchButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.codetroopers.betterpickers.widget.UnderlinePageIndicatorPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.commit451.untriggered.UntriggeredRadioButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.commit451.untriggered.UntriggeredSwitchCompat: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.cootek.drinkclock.widget.theme.ThemedSwitchCompat: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.cootek.veeu.main.view.widget.FeedsListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.cootek.veeu.main.view.widget.TRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.cootek.veeu.sdk.main.view.widget.FeedsListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.cootek.veeu.sdk.main.view.widget.SlideBackLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.cootek.veeu.sdk.main.view.widget.SwipeBackLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.cootek.veeu.sdk.main.view.widget.TRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.cronometer.android.widget.DatePicker: int getMonth()> -> _SOURCE_
<com.cronometer.android.widget.DatePicker: int getYear()> -> _SOURCE_
<com.crystal.crystalrangeseekbar.widgets.CrystalRangeSeekbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.crystal.crystalrangeseekbar.widgets.CrystalSeekbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.doomonafireball.betterpickers.widget.UnderlinePageIndicatorPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.dumsco.stressscan.application.widgets.NonSwipeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.epic.clinical.orders.view.h: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.facebook.react.views.checkbox.ReactCheckBoxEvent: boolean getIsChecked()> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.CustomViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.FeedbackEditWidget: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.PickerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.RateView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.ScaleRulerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.SlidingControlViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.TimePickerView: int getMinute()> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.billing.BillingCheckWidget: boolean isChecked()> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.billing.BillingCheckWidget: void toggle()> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.goal.GoalSelectScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitness.workout.exercise.ui.widget.training.TrainFeedbackView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitnesskeeper.runkeeper.component.SingleLineCell: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.fitnessmobileapps.fma.views.widgets.AccurateRatingBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitnessmobileapps.fma.views.widgets.AccurateRatingBar: float getRating()> -> _SOURCE_
<com.fitnessmobileapps.fma.views.widgets.LockableParallaxScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitnessmobileapps.fma.views.widgets.custom.TouchyWebView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitnow.loseit.widgets.PinWidget: java.lang.String getText()> -> _SOURCE_
<com.fitnow.loseit.widgets.c: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fitstar.pt.ui.settings.common.SwitchSettingView: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.fitstar.pt.ui.settings.d.b: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.freeletics.view.CheckBox: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.fullpower.applications.sleepz.widgets.Dial: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fullpower.applications.sleepz.widgets.FPFlexRadioGroup: void setOnCheckedChangeListener(com.fullpower.applications.sleepz.widgets.FPFlexRadioGroup$a)> -> _SOURCE_
<com.fullpower.applications.sleepz.widgets.GraphicalRangePicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fullpower.applications.sleepz.widgets.TimeRangeRing: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.fullpower.widget.SortButtonGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<com.fullpower.widget.ToggleableRadioButton: void toggle()> -> _SOURCE_
<com.fullpower.widget.ViewPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.garmin.android.apps.connectmobile.view.view_3_0.GCMComplexOneLineButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.garmin.android.apps.connectmobile.view.view_3_0.GCMComplexTwoLineButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.garmin.android.framework.widget.NumberPickerButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.garmin.android.framework.widget.SpinnerPreference: void onClick(android.content.DialogInterface,int)> -> _SOURCE_
<com.garmin.android.framework.widget.a.f: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.github.florent37.singledateandtimepicker.widget.WheelPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.github.jamesgay.fitnotes.view.d: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.github.xinthink.rnmk.widget.MKTouchable: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.eve.ui.widget.CustomViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.eve.ui.widget.CycleView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.eve.ui.widget.HomeTooltipLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.eve.ui.widget.LoadingView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.swerve.widget.PremiumBottomViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.ui.widget.CircularRevealView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.ui.widget.LoadingView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.ui.widget.LoadingViewBlack: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.glow.android.ui.widget.UninterceptableTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gnresound.tinnitus.architecture.presentation.widget.NonSwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gnresound.tinnitus.widget.CirclePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gnresound.tinnitus.widget.SoundScapeBubble: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.google.android.libraries.cast.companionlibrary.widgets.IntroductoryOverlay: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.google.android.material.internal.CheckableImageButton: boolean isChecked()> -> _SOURCE_
<com.google.android.material.textfield.TextInputEditText: android.text.Editable getText()> -> _SOURCE_
<com.gotokeep.camera.widget.touchview.TouchImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gotokeep.keep.commonui.widget.KeepSwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gotokeep.keep.commonui.widget.picker.view.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gotokeep.keep.commonui.widget.recyclerview.TouchRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gotokeep.keep.commonui.widget.rulers.InnerRulers.HorizontalRuler: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gotokeep.keep.commonui.widget.rulers.InnerRulers.VerticalRuler: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gotokeep.social.timeline.widget.ExpandableTextView: java.lang.CharSequence getText()> -> _SOURCE_
<com.grinasys.fwl.widget.DifficultySelectorView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.fwl.widget.RMRPlayButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.fwl.widget.SwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.fwl.widget.picker.HorizontalPickerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.puremind.android.ui.widget.CircularSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.puremind.android.ui.widget.SwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.puremind.android.ui.widget.TouchExtenderView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.grinasys.puremind.android.ui.widget.numberpicker.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.gtomato.android.ui.widget.CarouselView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.h6ah4i.android.widget.verticalseekbar.VerticalSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.haibison.android.lockpattern.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.healint.migraineapp.view.widget.IntensityView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.healthifyme.basic.shopify.view.widget.LockableScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.healthifyme.basic.widgets.CheckableImageView: boolean isChecked()> -> _SOURCE_
<com.healthifyme.basic.widgets.CheckableImageView: void toggle()> -> _SOURCE_
<com.healthifyme.basic.widgets.CheckableTextView: boolean isChecked()> -> _SOURCE_
<com.healthifyme.basic.widgets.CheckableTextView: void toggle()> -> _SOURCE_
<com.healthifyme.basic.widgets.HMERadioButton: boolean isChecked()> -> _SOURCE_
<com.healthifyme.basic.widgets.HMERadioButton: void toggle()> -> _SOURCE_
<com.healthifyme.basic.widgets.HMERadioGroup: void setOnCheckedChangeListener(com.healthifyme.basic.widgets.HMERadioGroup$b)> -> _SOURCE_
<com.healthifyme.basic.widgets.NonSwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.healthifyme.basic.widgets.fab_menu.FloatingActionItem: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.healthifyme.basic.widgets.fab_menu.FloatingActionMenu: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.healthifyme.basic.widgets.fab_menu.Label: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.helpscout.beacon.internal.common.widget.stack.CardContainerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.het.comres.widget.LeftSlideListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.hola.lib.widget.BaseRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.hola.lib.widget.GridGallery: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.hola.lib.widget.ScaleOnClickImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.hola.lib.widget.ScaleOnClickTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.hola.lib.widget.ScaleOnClickView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.htsmart.wristband.app.ui.widget.RulerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.crowdtestsdk.feedback.widgets.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.crowdtestsdk.notices.widgets.CheckEditText: boolean isChecked()> -> _SOURCE_
<com.huawei.crowdtestsdk.notices.widgets.CheckEditText: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.huawei.crowdtestsdk.notices.widgets.RadioEditText: android.text.Editable getText()> -> _SOURCE_
<com.huawei.crowdtestsdk.notices.widgets.RadioEditText: boolean isChecked()> -> _SOURCE_
<com.huawei.crowdtestsdk.widgets.CustViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.crowdtestsdk.widgets.RecordButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.crowdtestsdk.widgets.ratingBar.RatingBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.crowdtestsdk.widgets.ratingBar.RatingBar: float getRating()> -> _SOURCE_
<com.huawei.crowdtestsdk.widgets.searchView.EditTextClear: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.crowdtestsdk.widgets.searchView.SearchView: void addTextChangedListener(com.huawei.crowdtestsdk.widgets.searchView.ITextChangeCallBack)> -> _SOURCE_
<com.huawei.nfc.carrera.ui.widget.CmbClearEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.huawei.pay.ui.widget.ClearEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.humana.go365.common.view.SwitchListenerless: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.ihealth.widget_view.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ihealth.widget_view.NumberPicker: int getValue()> -> _SOURCE_
<com.ihealth.widget_view.SlidingDrawLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ihealth.widget_view.SlidingDrawLayout: void toggle()> -> _SOURCE_
<com.ihealth.widget_view.TouchDisableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ihealth.widget_view.listview.ReFreshListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.imagesource.android.ui.capture.CaptureIndexFieldActivity: void addTextChangedListenerValidation(android.widget.EditText,com.imagesource.android.ui.common.ClassValidation)> -> _SOURCE_
<com.imagesource.android.ui.capture.CaptureIndexFieldActivity: void addTextChangedListenerValidationSpinner(android.widget.Spinner,com.imagesource.android.ui.common.ClassValidation)> -> _SOURCE_
<com.imagesource.android.ui.capture.TableIndexFieldActivity: void addTextChangedListenerValidation(android.widget.EditText,com.imagesource.android.ui.common.ClassValidation)> -> _SOURCE_
<com.imagesource.android.ui.icmsdk.CaptureIndexFieldSDKActivity: void addTextChangedListenerValidation(android.widget.EditText,com.imagesource.android.ui.common.ClassValidation)> -> _SOURCE_
<com.imagesource.android.ui.icmsdk.CaptureIndexFieldSDKActivity: void addTextChangedListenerValidationSpinner(android.widget.Spinner,com.imagesource.android.ui.common.ClassValidation)> -> _SOURCE_
<com.iteration.widget.a: boolean isChecked()> -> _SOURCE_
<com.iteration.widget.a: void toggle()> -> _SOURCE_
<com.jaga.wheel.widget.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.janyun.jyou.watch.view.SwitchButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.jeek.calendar.widget.calendar.month.MonthView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.jeek.calendar.widget.calendar.schedule.ScheduleLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.jeek.calendar.widget.calendar.week.WeekView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kankan.wheel.widget.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.dashboard.widget.Carousel: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.Carousel: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.ControllableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.DashboardCarousel: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.ExpandableList: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.HorrizontalScroller: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.InterceptLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.MultiTouchImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.NoSwipeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.PhotoBrowser: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.RecipeList: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.RecipeListScroller: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.ui.widget.VerticalScroller: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kaylaitsines.sweatwithkayla.workout.widget.WorkoutVideoList: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.keep.fit.widget.ClickEffectTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.keep.fit.widget.CustomViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.keep.fit.widget.HeaderNotInterceptLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.keep.fit.widget.TimePicker: int getMinute()> -> _SOURCE_
<com.kingnew.foreign.measure.widget.CustomWordSpaceTextView: java.lang.CharSequence getText()> -> _SOURCE_
<com.kingnew.foreign.measure.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.other.widget.a.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.other.widget.datapicker.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.other.widget.edittext.EditTextWithClear: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.other.widget.numberpicker.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.other.widget.numberpicker.NumberPicker: int getValue()> -> _SOURCE_
<com.kingnew.foreign.other.widget.numberpicker.c: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.other.widget.switchbutton.MySwitchButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.service.widget.chart.ChartView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.system.view.widget.RulerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kingnew.foreign.system.view.widget.gallery.h: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kinsa.widget.CheckableButton: boolean isChecked()> -> _SOURCE_
<com.kinsa.widget.CheckableButton: void toggle()> -> _SOURCE_
<com.kinsa.widget.TimePickerDialogFragment: int getMinute()> -> _SOURCE_
<com.knowyourmeds.widget.SlideButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.kyleduo.switchbutton.SwitchButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.lark.meadowlark2.view.SegmentedGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<com.lifebeam.android.vi.widget.CheckableImageButton: boolean isChecked()> -> _SOURCE_
<com.lifebeam.android.vi.widget.CheckableImageButton: void setOnCheckedChangeListener(com.lifebeam.android.vi.widget.CheckableImageButton$b)> -> _SOURCE_
<com.lifebeam.android.vi.widget.CheckableImageButton: void toggle()> -> _SOURCE_
<com.lifebeam.android.vi.widget.old.ViButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lifebeam.android.vi.widget.old.ViSwitchToggle: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.lifebeam.android.vi.widget.v2.ViEditTextWithLabel: java.lang.String getText()> -> _SOURCE_
<com.lose.weight.workout.fix.body.app.widget.ChartView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lose.weight.workout.fix.body.app.widget.DKDragView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lose.weight.workout.fix.body.app.widget.PlankScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lose.weight.workout.fix.body.app.widget.RepetitionPushUpCountView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lose.weight.workout.fix.body.app.widget.TimeLengthChooseView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lose.weight.workout.fix.body.workout.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.lsjwzh.widget.recyclerviewpager.RecyclerViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mantuboro.widget.IndexableListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.markupartist.android.widget.PullToRefreshListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfCarouselWidget: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfCheckBoxWidget: boolean isChecked()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfCreditCardExpirationWidget: java.lang.String getText()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfEditTextWidget: java.lang.String getText()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfMaterialPhoneNumberWidget: java.lang.String getText()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfPhoneNumberWidget: java.lang.String getText()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfRatingUnit: void toggle()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfSwitchWidget: boolean isChecked()> -> _SOURCE_
<com.mdlive.mdlcore.fwfrodeo.fwf.widget.FwfTextViewWidget: java.lang.String getText()> -> _SOURCE_
<com.medicalgroupsoft.medical.app.ui.mainscreen.widgets.SideIndexView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.meevii.color.common.widget.GuideCheckBox: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.meevii.color.common.widget.PlayButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.meevii.color.common.widget.ScrollableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.meevii.color.common.widget.StarView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.meevii.color.common.widget.banner.AutoViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mindbodyonline.express.ui.widgets.ExpressDatePicker: int getMonth()> -> _SOURCE_
<com.mindbodyonline.express.ui.widgets.ExpressDatePicker: int getYear()> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.CalibrationWheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.CenterTouchSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.ClockNumberSelectorView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.DonutProgress: java.lang.String getText()> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.EventCircleView.EventCircleView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.LinkedViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.PeekLayerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.RangeSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.ShineDatePicker: int getMonth()> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.ShineDatePicker: int getYear()> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.ShineNumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.ShineNumberPicker: int getValue()> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.ShineTimePicker$SavedState: int getMinute()> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.TransparentClickView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.TutorialView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.rangeBars.RangeBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.misfitwearables.prometheus.common.widget.rangebar.RangeBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mynetdiary.ui.components.animatedwidgets.WeightProgressView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mypopsy.widget.FloatingSearchView$RecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.mypopsy.widget.FloatingSearchView: java.lang.CharSequence getText()> -> _SOURCE_
<com.mypopsy.widget.FloatingSearchView: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<com.netpulse.mobile.core.ui.widget.CheckedLinearLayout: boolean isChecked()> -> _SOURCE_
<com.netpulse.mobile.core.ui.widget.CheckedRelativeLayout: boolean isChecked()> -> _SOURCE_
<com.netpulse.mobile.core.ui.widget.NoSwipeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.netpulse.mobile.core.ui.widget.SlidingUpPanelLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.netpulse.mobile.goalcenter.ui.widget.ViewPagerGoalWizard: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.netpulse.mobile.legacy.ui.widget.SlidingLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.netpulse.mobile.social.ui.widget.TextViewFixTouchConsume: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.newtechsys.widgets.CheckableTwoLine: boolean isChecked()> -> _SOURCE_
<com.newtechsys.widgets.CheckableTwoLine: void toggle()> -> _SOURCE_
<com.nike.activitycommon.widgets.viewpager.SafeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.nike.music.ui.widget.NestedHorizontalScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.northcube.util.ui.widget.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.northcube.util.ui.widget.NumberPicker: int getValue()> -> _SOURCE_
<com.onemedical.android.widget.InterceptTouchLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ox.component.ui.widget.ripple.RippleButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ox.component.ui.widget.ripple.RippleFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ox.component.ui.widget.ripple.RippleImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ox.component.ui.widget.ripple.RippleLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ox.component.ui.widget.ripple.RippleRelativeLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.ox.component.ui.widget.ripple.RippleTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.period.calendar.rosa.menstrual.tracker.widget.NoScrollViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.period.calendar.rosa.menstrual.tracker.widget.NumberPickerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.period.calendar.rosa.menstrual.tracker.widget.slideview.SlideNumberChooseView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.period.tracker.widgets.HorizontalPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.petmeds1800.util.CustomSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.pfizer.us.digitalcompanion.feature.notes.ui.widget.CustomNotesViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.philips.cdp2.common.view.SilentSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.philips.cdp2.powersleep.view.CustomSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.philips.platform.csw.permission.uielement.SilenceableSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.philips.platform.mya.csw.permission.uielement.SilenceableSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.philips.platform.uid.view.widget.DotNavigationIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.philips.platform.uid.view.widget.EditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.philips.platform.uid.view.widget.Label: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.philips.platform.uid.view.widget.ProgressBarButton: java.lang.String getText()> -> _SOURCE_
<com.philips.platform.uid.view.widget.Slider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.pili.pldroid.player.widget.PLVideoTextureView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.pili.pldroid.player.widget.PLVideoView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.pili.pldroid.player.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.pregnancy.test.startdate.Fourth2: void onRadioButtonClicked(android.view.View)> -> _SOURCE_
<com.qliqsoft.widget.CenteredRadioImageButton: void toggle()> -> _SOURCE_
<com.qliqsoft.widget.CheckableImageView: boolean isChecked()> -> _SOURCE_
<com.qliqsoft.widget.CheckableImageView: void toggle()> -> _SOURCE_
<com.qliqsoft.widget.CheckableRelativeLayout: boolean isChecked()> -> _SOURCE_
<com.qliqsoft.widget.CheckableRelativeLayout: void toggle()> -> _SOURCE_
<com.qliqsoft.widget.HackyViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qliqsoft.widget.ImageRadioGroup: void setOnCheckedChangeListener(com.qliqsoft.widget.ImageRadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<com.qliqsoft.widget.SortableListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qliqsoft.widget.scrollview.AbstractSlotView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qliqsoft.widget.scrollview.FixedSlotView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qliqsoft.widget.swipes.BothSideActionsItem: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qliqsoft.widget.swipes.ListViewSwipeTrap: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qozix.tileview.widgets.ZoomPanLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.qualaroo.ui.render.widget.ListeningCheckableGroup: void setOnCheckedChangeListener(com.qualaroo.ui.render.widget.ListeningCheckableGroup$c)> -> _SOURCE_
<com.qualaroo.ui.render.widget.a: boolean isChecked()> -> _SOURCE_
<com.qualaroo.ui.render.widget.a: java.lang.String getText()> -> _SOURCE_
<com.qualaroo.ui.render.widget.a: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.qualaroo.ui.render.widget.a: void toggle()> -> _SOURCE_
<com.quatkhoi.widget.IndexableListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.resmed.mon.ui.view.RMONSwitchCompat: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.rey.material.widget.Button: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.CheckedImageView: boolean isChecked()> -> _SOURCE_
<com.rey.material.widget.CheckedImageView: void toggle()> -> _SOURCE_
<com.rey.material.widget.CheckedTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.CompoundButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.DatePicker$MonthAdapter: int getMonth()> -> _SOURCE_
<com.rey.material.widget.DatePicker$MonthAdapter: int getYear()> -> _SOURCE_
<com.rey.material.widget.DatePicker$MonthView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.DatePicker: int getMonth()> -> _SOURCE_
<com.rey.material.widget.DatePicker: int getYear()> -> _SOURCE_
<com.rey.material.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<com.rey.material.widget.EditText: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<com.rey.material.widget.FloatingActionButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.FrameLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.ImageButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.ImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.LinearLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.ListPopupWindow: long getSelectedItemId()> -> _SOURCE_
<com.rey.material.widget.RadioButton: void toggle()> -> _SOURCE_
<com.rey.material.widget.RelativeLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.Slider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.Spinner: android.view.View getSelectedView()> -> _SOURCE_
<com.rey.material.widget.Switch: boolean isChecked()> -> _SOURCE_
<com.rey.material.widget.Switch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.Switch: void setOnCheckedChangeListener(com.rey.material.widget.Switch$OnCheckedChangeListener)> -> _SOURCE_
<com.rey.material.widget.Switch: void toggle()> -> _SOURCE_
<com.rey.material.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.TimePicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.rey.material.widget.TimePicker: int getMinute()> -> _SOURCE_
<com.rey.material.widget.YearPicker$YearAdapter: int getYear()> -> _SOURCE_
<com.rey.material.widget.YearPicker: int getYear()> -> _SOURCE_
<com.rockmyrun.rockmyrun.widgets.CheckableRelativeLayout: boolean isChecked()> -> _SOURCE_
<com.rockmyrun.rockmyrun.widgets.CheckableRelativeLayout: void toggle()> -> _SOURCE_
<com.runloop.seconds.widget.CheckableLinearLayout: boolean isChecked()> -> _SOURCE_
<com.runloop.seconds.widget.CheckableLinearLayout: void toggle()> -> _SOURCE_
<com.runloop.seconds.widget.FilledCircleView: boolean isChecked()> -> _SOURCE_
<com.runloop.seconds.widget.FilledCircleView: void toggle()> -> _SOURCE_
<com.salesforce.android.service.common.ui.views.SalesforceFloatingActionToggleButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.samsung.android.app.shealth.expert.consultation.uk.ui.widgets.RatingBarView: float getRating()> -> _SOURCE_
<com.samsung.android.app.shealth.program.plugin.widget.ExpandableTextView: java.lang.CharSequence getText()> -> _SOURCE_
<com.samsung.android.app.shealth.program.plugin.widget.slideuppanel.LockableRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.program.plugin.widget.slideuppanel.ProgramViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.program.plugin.widget.slideuppanel.SlidingUpPanelLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.program.plugin.widget.slidingpanel.SlidingUpPanelLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.tracker.weight.widget.WeightEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.EGridView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.EListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.GedDateTimeFactoryBuilder$GedDatePicker: int getMonth()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.GedDateTimeFactoryBuilder$GedDatePicker: int getYear()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.GedDateTimeFactoryBuilder$GedTimePicker: int getMinute()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.GedNumberFactoryBuilder$GedNumberPicker: int getValue()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.HDatePicker: int getMonth()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.HDatePicker: int getYear()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.HNumberPicker: int getValue()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.HTimePicker: int getMinute()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.SepDateTimeFactoryBuilder$SepDatePicker: int getMonth()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.SepDateTimeFactoryBuilder$SepDatePicker: int getYear()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.SepDateTimeFactoryBuilder$SepTimePicker: int getMinute()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.SepNumberFactoryBuilder$SepNumberPicker: int getValue()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.StickyScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.VerticalViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.fab.FloatingActionsMenu: void toggle()> -> _SOURCE_
<com.samsung.android.app.shealth.widget.fab.TouchDelegateGroup: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.slidingpanel.SlidingUpPanelLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.samsung.android.app.shealth.widget.valuepicker.NumberPickerView2: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.seattleclouds.widget.SCTabWidget$1: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.seattleclouds.widget.SCTabWidget$2: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.seattleclouds.widget.SCViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.seattleclouds.widget.n: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.seattleclouds.widget.o: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.sillens.shapeupclub.widget.ObservableScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.skyscape.android.ui.widget.PanelSwitcher: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.snipermob.sdk.mobileads.widget.html.AdWebView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.sonosite.sonoaccess.widgets.CirclePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.sonosite.sonoaccess.widgets.TextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.sparkpeople.androidtracker.widget.crop.RotationGestureDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.spruce.messenger.ui.widgets.CheckableRelativeLayout: boolean isChecked()> -> _SOURCE_
<com.spruce.messenger.ui.widgets.CheckableRelativeLayout: void toggle()> -> _SOURCE_
<com.spruce.messenger.ui.widgets.NoSwipeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.spruce.messenger.ui.widgets.PathwayButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.spruce.messenger.ui.widgets.TouchThroughTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.spruce.messenger.ui.widgets.dialpad.DigitsEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.sprylab.android.widget.TextureVideoView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.stepstone.stepper.internal.widget.StepViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.takisoft.datetimepicker.widget.DatePicker: int getMonth()> -> _SOURCE_
<com.takisoft.datetimepicker.widget.DatePicker: int getYear()> -> _SOURCE_
<com.takisoft.datetimepicker.widget.NumberPicker: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.takisoft.datetimepicker.widget.NumberPicker: int getValue()> -> _SOURCE_
<com.takisoft.datetimepicker.widget.RadialTimePickerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.takisoft.datetimepicker.widget.SimpleMonthView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.takisoft.datetimepicker.widget.TimePicker: int getMinute()> -> _SOURCE_
<com.teladoc.members.sdk.views.FormCellWithSwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.telerik.android.primitives.widget.sidedrawer.NSSideDrawer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.android.primitives.widget.sidedrawer.NSSideDrawerLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.android.primitives.widget.sidedrawer.RadSideDrawer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.android.primitives.widget.sidedrawer.contents.NavigationItem: java.lang.String getText()> -> _SOURCE_
<com.telerik.android.primitives.widget.slideview.RadSlideView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.autocomplete.RadAutoCompleteTextView: java.lang.CharSequence getText()> -> _SOURCE_
<com.telerik.widget.autocomplete.TokenModel: java.lang.String getText()> -> _SOURCE_
<com.telerik.widget.calendar.CalendarScrollManager$DecorationsLayer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.calendar.CalendarScrollManager$FragmentHolder$LayerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.calendar.CalendarScrollManager$FragmentHolder: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.calendar.CalendarTextElement: java.lang.String getText()> -> _SOURCE_
<com.telerik.widget.calendar.RadCalendarView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.chart.visualization.common.RadChartViewBase: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.dataform.visualization.RadDataForm: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.list.RadListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.list.SwipeRefreshBehavior$SwipeRefreshIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.telerik.widget.numberpicker.RadNumberPicker: double getValue()> -> _SOURCE_
<com.telerik.widget.primitives.panels.RadScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.theinnerhour.b2b.widgets.CircularSlider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.theinnerhour.b2b.widgets.VideoControllerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.tonicartos.widget.stickygridheaders.StickyGridHeadersGridView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.truven.commonandroid.widget.TabToggleButton: void toggle()> -> _SOURCE_
<com.umeng.socialize.shareboard.widgets.SocializeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.uptech.audiojoy.ui.widget.MediaPlayerController: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.urbanairship.widget.UAWebView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.urbandroid.lux.ui.SegmentedGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<com.venuenext.vncoreui.ui.controls.widgets.Widget$TextWidget: java.lang.String getText()> -> _SOURCE_
<com.venuenext.vncoreui.ui.controls.widgets2.PickerWidget2$PickerItem: java.lang.String getText()> -> _SOURCE_
<com.venuenext.vncoreui.ui.controls.widgets2.SwiperWidget2$SwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.venuenext.vncoreui.ui.controls.widgets2.Widget2$Accessibility: java.lang.String getText()> -> _SOURCE_
<com.virginpulse.genesis.widget.HamburgerButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.genesis.widget.HorizontalPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.genesis.widget.NonSwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.genesis.widget.SlidingPaneLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.genesis.widget.ToggleRadioButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.genesis.widget.ToggleRadioButton: void toggle()> -> _SOURCE_
<com.virginpulse.genesis.widget.expandablecontentlist.ExpandableContentListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.FontEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.FontTextInputEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.SafeAppCompatButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.SafeAppCompatTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.SafeButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.SafeEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.SafeTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.SafeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.virginpulse.widget.ScrollableChildWebView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.ActivationArea: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.DirectoryListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.DynamicListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.LongTouchDialog: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.PinchDetectorDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.SlidingDrawer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.voalte.android.ui.widgets.SlidingDrawer: void toggle()> -> _SOURCE_
<com.vsee.commonhelpers.widget.LockableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.wahoofitness.fitness.widget.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.wakeup.smartband.ui.widget.swipe.SwipeContainerLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.wakeup.smartband.ui.widget.swipe.SwipeLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.wakeup.smartband.ui.widget.view.BarGraphView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.wakeup.smartband.ui.widget.view.OverScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.warkiz.widget.IndicatorSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.warnyul.android.widget.FastVideoView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.weightwatchers.experts.ui.views.FilterSwitchView: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.whistle.bolt.ui.legacy.widgets.AddHighlightForFeedsMenuView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.whistle.bolt.ui.legacy.widgets.AddHighlightMenuView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.whistle.bolt.ui.legacy.widgets.RightAlignedInputField: java.lang.String getText()> -> _SOURCE_
<com.whistle.bolt.ui.legacy.widgets.RightAlignedInputField: void addTextChangedListener(android.text.TextWatcher)> -> _SOURCE_
<com.whistle.bolt.ui.widgets.BarChartView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.whistle.bolt.ui.widgets.CircularPlaceOverlay: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.whistle.bolt.ui.widgets.MultiPetAtPlaceMarkerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.whistle.bolt.ui.widgets.QuadrilateralPlaceOverlay: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.whistle.bolt.ui.widgets.TwoLineSwitchListItemView: boolean isChecked()> -> _SOURCE_
<com.whistle.bolt.ui.widgets.TwoLineSwitchListItemView: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.xogrp.thebump.widget.CheckableFrameLayout: void toggle()> -> _SOURCE_
<com.xogrp.thebump.widget.CommunityViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.FixedLabelSlidingTabLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.FixedSlidingTabLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.IconPageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.LinePageIndicator: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.PinnedHeaderExpandableListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.PullToSpringBackScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.RippleView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.photoview.VersionedGestureDetector$CupcakeDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.photoview.VersionedGestureDetector$EclairDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.xogrp.thebump.widget.photoview.VersionedGestureDetector$FroyoDetector: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.yalantis.ucrop.view.widget.HorizontalProgressWheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.zipongo.common.ui.widget.CheckableLinearLayout: boolean isChecked()> -> _SOURCE_
<com.zipongo.common.ui.widget.CheckableLinearLayout: void setOnCheckedChangeListener(com.zipongo.common.ui.widget.ObservableCheckable$OnCheckedChangeListener)> -> _SOURCE_
<com.zipongo.common.ui.widget.CheckableLinearLayout: void toggle()> -> _SOURCE_
<com.zipongo.common.ui.widget.CheckableTextView: boolean isChecked()> -> _SOURCE_
<com.zipongo.common.ui.widget.CheckableTextView: void setOnCheckedChangeListener(com.zipongo.common.ui.widget.ObservableCheckable$OnCheckedChangeListener)> -> _SOURCE_
<com.zipongo.common.ui.widget.CheckableTextView: void toggle()> -> _SOURCE_
<com.zipongo.design.widget.CheckableImageView: boolean isChecked()> -> _SOURCE_
<com.zipongo.design.widget.CheckableImageView: void setOnCheckedChangeListener(com.zipongo.design.widget.ObservableCheckable$OnCheckedChangeListener)> -> _SOURCE_
<com.zipongo.design.widget.CheckableImageView: void toggle()> -> _SOURCE_
<com.zipongo.design.widget.CheckableLinearLayout: boolean isChecked()> -> _SOURCE_
<com.zipongo.design.widget.CheckableLinearLayout: void setOnCheckedChangeListener(com.zipongo.design.widget.ObservableCheckable$OnCheckedChangeListener)> -> _SOURCE_
<com.zipongo.design.widget.CheckableLinearLayout: void toggle()> -> _SOURCE_
<com.zipongo.design.widget.CheckableRadioGroup: int getCheckedRadioButtonId()> -> _SOURCE_
<com.zipongo.design.widget.CheckableRadioGroup: void setOnCheckedChangeListener(com.zipongo.design.widget.CheckableRadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<com.zipongo.design.widget.CheckableTextView: boolean isChecked()> -> _SOURCE_
<com.zipongo.design.widget.CheckableTextView: void setOnCheckedChangeListener(com.zipongo.design.widget.ObservableCheckable$OnCheckedChangeListener)> -> _SOURCE_
<com.zipongo.design.widget.CheckableTextView: void toggle()> -> _SOURCE_
<com.zipongo.design.widget.MultiSwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.zipongo.surveys.widget.TextInput: java.lang.String getText()> -> _SOURCE_
<com.zipongo.ui.widget.MultiSwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.zlamanit.lib.g.a.a: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<com.zlinepay.jiam.widget.XListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.zocdoc.android.widget.CustomWaitDialog: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.zwift.android.ui.widget.CellsLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<com.zwift.android.ui.widget.CheckedFrameLayout: boolean isChecked()> -> _SOURCE_
<com.zwift.android.ui.widget.CheckedFrameLayout: void toggle()> -> _SOURCE_
<com.zwift.android.ui.widget.CheckedImageButton: boolean isChecked()> -> _SOURCE_
<com.zwift.android.ui.widget.CheckedImageButton: void setOnCheckedChangeListener(com.zwift.android.ui.widget.CheckedImageButton$OnCheckedChangeListener)> -> _SOURCE_
<com.zwift.android.ui.widget.CheckedImageButton: void toggle()> -> _SOURCE_
<com.zwift.android.ui.widget.SafeViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<cootek.sevenmins.sport.refactoring.presentation.ui.widget.SlideUnlockView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<crack.fitness.losebellyfat.widget.MyScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<crack.fitness.losebellyfat.widget.UnlockView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<csmc.edu.mycslink.widget.floatingsearchview.FloatingSearchView$CustomRecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<csmc.edu.mycslink.widget.floatingsearchview.FloatingSearchView: java.lang.CharSequence getText()> -> _SOURCE_
<de.keyboardsurfer.android.widget.crouton.Crouton: java.lang.CharSequence getText()> -> _SOURCE_
<de.komoot.android.widget.KmtScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<de.moodpath.android.widget.NonScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<de.moodpath.android.widget.NonScrollViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<de.moodpath.android.widget.VerticalViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<de.moodpath.android.widget.WrapContentViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.design.widget.CheckableImageButton: boolean isChecked()> -> _SOURCE_
<fgl.android.support.design.widget.CheckableImageButton: void toggle()> -> _SOURCE_
<fgl.android.support.design.widget.CollapsingTextHelper: java.lang.CharSequence getText()> -> _SOURCE_
<fgl.android.support.design.widget.CoordinatorLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.design.widget.FloatingActionButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.design.widget.TabLayout$Tab: java.lang.CharSequence getText()> -> _SOURCE_
<fgl.android.support.v4.widget.DrawerLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v4.widget.NestedScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v4.widget.SlidingPaneLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v4.widget.SwipeRefreshLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.AbsActionBarView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.ActionBarContainer: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.ActionBarContextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.AppCompatSpinner: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.ListPopupWindow: long getSelectedItemId()> -> _SOURCE_
<fgl.android.support.v7.widget.ListViewCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.RecyclerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.SearchView$UpdatableTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.SwitchCompat: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<fgl.android.support.v7.widget.SwitchCompat: void toggle()> -> _SOURCE_
<fgl.android.support.v7.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<gala.mix.place.widget.CustomViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<gala.mix.place.widget.image.GestureImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<gala.mix.place.widget.theme.ThemeImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<gala.mix.place.widget.theme.ThemeRelativeLayoutButton: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<gala.mix.place.widget.theme.ThemeTextCheckBox: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<greendroid.widget.PagedView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<hx.widget.VpNoSwipe: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<hydration.watertracker.waterreminder.widget.NoScrollViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<im.ene.lab.toro.widget.ToroVideoView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<io.apptik.widget.MultiSlider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<io.ghyeok.stickyswitch.widget.StickySwitch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<io.ghyeok.stickyswitch.widget.StickySwitch: java.lang.String getText()> -> _SOURCE_
<io.huannguyen.commonwidget.DatePickerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<io.huannguyen.commonwidget.TimePickerView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<it.mthree.core.ui.widgets.a: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<it.mthree.headapp.ui.widgets.PainIntensityBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<it.mthree.headapp.ui.widgets.PainIntensityChart: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<it.mthree.headapp.ui.widgets.PainPositionView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<it.sephiroth.android.library.widget.AbsHListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<it.sephiroth.android.library.widget.AdapterView: long getSelectedItemId()> -> _SOURCE_
<it.sephiroth.android.library.widget.a: long getSelectedItemId()> -> _SOURCE_
<kankan.wheel.widget.WheelScroller: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<kankan.wheel.widget.WheelView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<me.imid.view.SwitchButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<mobi.firedepartment.widgets.BottomBarDrawerLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<mobi.firedepartment.widgets.NonSwipeableViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<net.workoutinc.butt_exercises_workouts.customWidget.SwitchButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<net.workoutinc.seven_7minutesfitness_forwomen.customWidget.SwitchButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<org.adw.library.widgets.discreteseekbar.DiscreteSeekBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.chromium.ui.widget.TextViewWithClickableSpans: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.iggymedia.periodtracker.feature.feed.ui.widgets.MarkdownTextView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.jraf.android.backport.switchwidget.Switch: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.jraf.android.backport.switchwidget.TwoStatePreference: boolean isChecked()> -> _SOURCE_
<org.metova.android.widgets.ProgressBar: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.metova.android.widgets.richcontent.RichContentChildView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.metova.android.widgets.richcontent.RichContentTextView: java.lang.CharSequence getText()> -> _SOURCE_
<org.metova.android.widgets.richcontent.RichContentView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<org.pulsepoint.aeds.android.fragments.widgets.MenuToggleButton: void toggle()> -> _SOURCE_
<org.stopbreathethink.app.sbtviews.card_group.CardGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> -> _SOURCE_
<ru.mobiledimension.kbr.ui.widget.BagTypeView: boolean isChecked()> -> _SOURCE_
<ru.mobiledimension.kbr.ui.widget.BagTypeView: java.lang.CharSequence getText()> -> _SOURCE_
<ru.mobiledimension.kbr.ui.widget.CalculateExpandView: void toggle()> -> _SOURCE_
<ru.mobiledimension.kbr.ui.widget.ExpandView: void toggle()> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.AvatarPickerImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.ClockInView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.ContentScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.NoScrollerViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.ScrollLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.view.FastVideoView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.view.HiNetErrorView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<step.tracker.stepcounter.walking.widget.view.TopToBottomFinishLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<steptracker.stepcounter.pedometer.widgets.NoScrollViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.TiImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.TiUIEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.TiUILabel$1: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.TiUIScrollView$TiHorizontalScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.TiUIScrollView$TiVerticalScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.TiUIScrollableView$1: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.listview.TiNestedListView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.tabgroup.TiUIActionBarTabGroup$1: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<ti.modules.titanium.ui.widget.webview.TiUIWebView$TiWebView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<today.onedrop.android.common.widget.CircularSlider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<today.onedrop.android.common.widget.ClearableEditText: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<today.onedrop.android.common.widget.MultiSlider: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<view.RallySwitch: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> -> _SOURCE_
<walking.pedometer.fit.stepcounter.widget.AvatarPickerImageView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<walking.pedometer.fit.stepcounter.widget.ContentScrollView: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<walking.pedometer.fit.stepcounter.widget.NoScrollerViewPager: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_
<walking.pedometer.fit.stepcounter.widget.ScrollLayout: boolean onTouchEvent(android.view.MotionEvent)> -> _SOURCE_


<android.content.ContentResolver: android.net.Uri insert(android.net.Uri, android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri, java.lang.String, java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_


<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)> -> _SINK_


<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String, java.lang.Object[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteStatement: long executeInsert()> -> _SINK_
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String, java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)> -> _SINK_



<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context, android.net.Uri, java.lang.String, android.os.Bundle, android.app.PendingIntent)> -> _SINK_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_


<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_



<androidx.room.Dao: int delete(User)> -> _SINK_
<androidx.room.Dao: int update(User)> -> _SINK_
<androidx.room.Dao: java.util.List<java.lang.Long> insertAll(User...)> -> _SINK_
<androidx.room.Dao: long insert(User)> -> _SINK_
<androidx.room.Dao: long[] insertAll(java.util.List<User>)> -> _SINK_
<androidx.room.Dao: int delete(java.util.List<User>)> -> _SINK_
<androidx.room.Dao: int deleteById(int)> -> _SINK_
<androidx.room.Dao: int update(java.util.List<User>)> -> _SINK_
<androidx.room.Dao: int updateAll(java.util.List<User>)> -> _SINK_
<androidx.room.Dao: void insertOrReplace(User)> -> _SINK_
<androidx.room.Dao: long insertOrThrow(User)> -> _SINK_




<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> setValue(java.lang.Object)> -> _SINK_
<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> updateChildren(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.CollectionReference: com.google.android.gms.tasks.Task<com.google.firebase.firestore.DocumentReference> add(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> set(java.util.Map<java.lang.String,java.lang.Object>, com.google.firebase.firestore.SetOptions)> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> update(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> removeValue()> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> delete()> -> _SINK_
<com.google.firebase.firestore.WriteBatch: com.google.firebase.firestore.WriteBatch set(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String, java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.WriteBatch: com.google.firebase.firestore.WriteBatch update(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String, java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.WriteBatch: com.google.firebase.firestore.WriteBatch delete(com.google.firebase.firestore.DocumentReference)> -> _SINK_
<com.google.firebase.firestore.Transaction: com.google.firebase.firestore.Transaction set(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String, java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.Transaction: com.google.firebase.firestore.Transaction update(com.google.firebase.firestore.DocumentReference, java.util.Map<java.lang.String, java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.Transaction: com.google.firebase.firestore.Transaction delete(com.google.firebase.firestore.DocumentReference)> -> _SINK_



<io.realm.Realm: void executeTransaction(io.realm.Realm.Transaction)> -> _SINK_
<io.realm.Realm: void insert(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void insert(java.util.Collection<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void insertOrUpdate(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void insertOrUpdate(java.util.Collection<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void copyToRealm(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void copyToRealm(java.util.Collection<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void copyToRealmOrUpdate(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void copyToRealmOrUpdate(java.util.Collection<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void delete(io.realm.Class<? extends io.realm.RealmModel>)> -> _SINK_
<io.realm.Realm: void executeTransactionAsync(io.realm.Realm.Transaction)> -> _SINK_



<java.io.BufferedOutputStream: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(int)> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(java.io.ByteArrayOutputStream)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.CharArrayWriter: void write(int)> -> _SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.CharArrayWriter: void writeTo(java.io.Writer)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.FilterOutputStream: void write(byte[])> -> _SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(char[],int,int)> -> _SINK_
<java.io.FilterWriter: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ObjectInputStream: void registerValidation(java.io.ObjectInputValidation,int)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,boolean)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,byte)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,char)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,double)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,float)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,int)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,long)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void put(java.lang.String,short)> -> _SINK_
<java.io.ObjectOutputStream.PutField: void write(java.io.ObjectOutput)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[])> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<java.io.ObjectOutputStream: void writeFields()> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeStreamHeader()> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.PipedOutputStream: void write(int)> -> _SINK_
<java.io.PipedWriter: void write(char[],int,int)> -> _SINK_
<java.io.PipedWriter: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBoolean(boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeByte(byte)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<java.io.RandomAccessFile: void writeShort(int)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.Writer: void close()> -> _SINK_
<java.io.Writer: void flush()> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_



<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)> -> _SINK_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection, java.lang.Class[])> -> _SINK_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])> -> _SINK_
<java.net.CookieHandler: java.lang.Object getContent(java.net.URLConnection, java.lang.Class[])> -> _SINK_
<java.net.CookieHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])> -> _SINK_

<java.net.CookieHandler: void put(java.net.URI, java.util.Map)> -> _SINK_
<java.net.CookieHandler: void put(java.net.URI,java.util.Map)> -> _SINK_
<java.net.CookieManager: java.util.Map get(java.net.URI, java.util.Map)> -> _SINK_
<java.net.CookieManager: java.util.Map get(java.net.URI,java.util.Map)> -> _SINK_
<java.net.CookieManager: void put(java.net.URI, java.util.Map)> -> _SINK_
<java.net.CookieManager: void put(java.net.URI,java.util.Map)> -> _SINK_

<java.net.DatagramSocket: void creteSocket(int, java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocket: void creteSocket(int,java.net.InetAddress)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)> -> _SINK_


<java.net.DatagramSocketImpl: void connect(byte)> -> _SINK_
<java.net.DatagramSocketImpl: void create()> -> _SINK_

<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> -> _SINK_
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getContentEncoding()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String, long)> -> _SINK_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String, byte[]. java.net.NetworkInterface)> -> _SINK_
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> -> _SINK_
<java.net.Inet6Address: void readObject(java.io.ObjectInputStream)> -> _SINK_
<java.net.Inet6Address: void writeObject(java.io.ObjectOutputStream)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket, byte)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> -> _SINK_


<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_

<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress, int)> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress,int)> -> _SINK_

<java.net.SocketImpl: java.io.OutputStream getOutputStream()> -> _SINK_

<java.net.SocketImpl: void connect(java.net.InetAddress, int)> -> _SINK_
<java.net.SocketImpl: void connect(java.net.SocketAddress, int)> -> _SINK_

<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<java.net.URL: java.net.HttpURLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.URLConnection: java.lang.Object getcontent()> -> _SINK_
<java.net.URLConnection: java.lang.Object getcontent(java.lang.Class[])> -> _SINK_

<java.net.URLConnection: void connect()> -> _SINK_

<java.net.URLConnection: void setFileMap(java.net.FileNameMap)> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String, java.lang.String)> -> _SINK_

<java.net.URLDecoder: java.lang.String decode(java.lang.String)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String, java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String, java.lang.String)> -> _SINK_

<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)> -> _SINK_
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL, java.net.Proxy)> -> _SINK_



<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)> -> _SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: void connect()> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void connect()> -> _SINK_
<libcore.net.http.HttpEngine: void sendRequest()> -> _SINK_
<libcore.net.http.HttpEngine: void readResponse()> -> _SINK_
<libcore.net.http.HttpEngine: void openSocketConnection()> -> _SINK_
<libcore.net.http.HttpEngine: void connect()> -> _SINK_
<libcore.net.http.HttpEngine: void readNetworkResponse()> -> _SINK_
<libcore.net.http.HttpTransport: void writeRequestHeaders(libcore.net.http.RequestHeaders)> -> _SINK_
<libcore.net.http.HttpTransport: void writeRequestBody(libcore.net.http.RetryableOutputStream)> -> _SINK_


<net.sqlcipher.database.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: void execSQL(java.lang.String, java.lang.Object[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], int)> -> _SINK_
<net.sqlcipher.database.SQLiteStatement: void execute()> -> _SINK_
<net.sqlcipher.database.SQLiteStatement: long executeInsert()> -> _SINK_


<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<okhttp3.Call: void enqueue(okhttp3.Callback)> -> _SINK_
<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)> -> _SINK_
<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> -> _SINK_
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.io.File)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder put(okhttp3.RequestBody)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder delete(okhttp3.RequestBody)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder patch(okhttp3.RequestBody)> -> _SINK_
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType, java.lang.String)> -> _SINK_
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType, byte[])> -> _SINK_
<okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType, byte[], int, int)> -> _SINK_
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String, java.lang.String, okhttp3.RequestBody)> -> _SINK_
<okhttp3.MultipartBody$Builder: okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String, java.lang.String)> -> _SINK_


<org.apache.bcel.util.JavaWrapper: void runMain(java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.conn.BasicManagedEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)> -> _SINK_
<org.apache.http.conn.scheme.SchemeRegistry: void setItems(java.util.Map)> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)> -> _SINK_
<org.apache.http.cookie.CookieSpecRegistry: void setItems(java.util.Map)> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)> -> _SINK_
<org.apache.http.entity.BufferedHttpEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.impl.HttpConnectionMetricsImpl: void setMetric(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)> -> _SINK_
<org.apache.http.impl.auth.DigestScheme: void overrideParamter(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)> -> _SINK_
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)> -> _SINK_
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void setState(java.lang.Object)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> -> _SINK_
<org.apache.http.impl.cookie.AbstractCookieSpec: void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)> -> _SINK_
<org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void setHeader(org.apache.http.Header)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])> -> _SINK_

<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])> -> _SINK_
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)> -> _SINK_
<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.stratos.cli.StratosApplication: int run(java.lang.String[])> -> _SINK_
<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> -> _SINK_
<org.apache.xalan.xsltc.compiler.util.Util: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.xalan.xsltc.runtime.BasisLibrary: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)> -> _SINK_
<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)> -> _SINK_
<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])> -> _SINK_
<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)> -> _SINK_
<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)> -> _SINK_
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)> -> _SINK_
<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: long insert(T)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: void delete(T)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: void insertInTx(java.lang.Iterable<T>)> -> _SINK_
<org.greenrobot.greendao.AbstractDao: void update(T)> -> _SINK_


<org.springframework.format.datetime.joda.DateTimeParser: org.joda.time.DateTime parse(java.lang.String,java.util.Locale)> -> _SINK_
<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.Object parse(java.lang.String,java.util.Locale)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)> -> _SINK_

<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)> -> _SINK_
<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)> -> _SINK_
<org.springframework.orm.hibernate3.TypeDefinitionBean: void setParameters(java.util.Properties)> -> _SINK_
<org.springframework.orm.hibernate3.support.ClobStringType: int[] sqlTypes()> -> _SINK_
<org.springframework.security.util.FieldUtils: void setProtectedFieldValue(java.lang.String,java.lang.Object,java.lang.Object)> -> _SINK_
<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)> -> _SINK_
<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void runAfterTransactionMethods(org.springframework.test.context.TestContext)> -> _SINK_
<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl()> -> _SINK_
<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)> -> _SINK_
<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> -> _SINK_
<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)> -> _SINK_
<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> -> _SINK_
<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String, java.lang.Object[])> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String, org.springframework.jdbc.core.PreparedStatementSetter)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int update(java.lang.String, java.lang.Object[], int[])> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[] batchUpdate(java.lang.String, java.util.List<java.lang.Object[]>)> -> _SINK_
<org.springframework.jdbc.core.JdbcTemplate: int[] batchUpdate(java.lang.String, java.util.List<java.lang.Object[]>, int[])> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String, java.util.Map<java.lang.String, ?>)> -> _SINK_
<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int[] batchUpdate(java.lang.String, java.util.Map<java.lang.String, ?>[])> -> _SINK_
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void send(java.lang.Object, org.springframework.http.MediaType)> -> _SINK_
<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody: void writeTo(java.io.OutputStream)> -> _SINK_
<org.springframework.web.servlet.ModelAndView: void addObject(java.lang.String, java.lang.Object)> -> _SINK_
<org.springframework.web.servlet.ModelAndView: void addAllObjects(java.util.Map<java.lang.String, ?>)> -> _SINK_
<org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter: java.lang.Object invokeHandlerMethod(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.web.method.HandlerMethod)> -> _SINK_
<org.springframework.web.socket.WebSocketSession: void sendMessage(org.springframework.web.socket.WebSocketMessage)> -> _SINK_


<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> postData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> putData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> deleteData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> patchData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> sendData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> uploadFile(@Part okhttp3.MultipartBody.Part)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> sendForm(@FieldMap java.util.Map<java.lang.String, java.lang.String>)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> sendUrlEncoded(@Field java.lang.String, @Field java.lang.String)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> sendMultiPart(@PartMap java.util.Map<java.lang.String, okhttp3.RequestBody>)> -> _SINK_

<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer, long)> -> _SINK_
<java.nio.channels.FileChannel: long transferTo(long, long, java.nio.channels.WritableByteChannel)> -> _SINK_
<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel, long, long)> -> _SINK_
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future<java.lang.Integer> write(java.nio.ByteBuffer, long)> -> _SINK_
<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer, long, java.lang.Object, java.nio.channels.CompletionHandler<java.lang.Integer, ? super java.lang.Object>)> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer[])> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer[], int, int)> -> _SINK_
<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer, java.net.SocketAddress)> -> _SINK_
<java.nio.channels.Pipe$SinkChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.Pipe$SinkChannel: int write(java.nio.ByteBuffer[])> -> _SINK_
<java.nio.channels.Pipe$SinkChannel: int write(java.nio.ByteBuffer[], int, int)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path, byte[], java.nio.file.OpenOption[])> -> _SINK_
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path, java.lang.Iterable<java.lang.CharSequence>, java.nio.charset.Charset, java.nio.file.OpenOption[])> -> _SINK_

<java.nio.file.Files: void writeString(java.nio.file.Path, java.lang.CharSequence, java.nio.file.OpenOption[])> -> _SINK_
<java.nio.file.Files: void write(java.nio.file.Path, byte[], java.nio.file.OpenOption[])> -> _SINK_
<java.nio.file.Files: java.io.BufferedWriter newBufferedWriter(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption[])> -> _SINK_



<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[], int, int)> -> _SINK_
<java.io.FileOutputStream: void close()> -> _SINK_
<java.io.FileWriter: void write(java.lang.String)> -> _SINK_
<java.io.FileWriter: void write(char[])> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String)> -> _SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer, java.net.SocketAddress)> -> _SINK_
<java.nio.channels.Pipe$SinkChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path, byte[], java.nio.file.OpenOption[])> -> _SINK_
<java.net.HttpURLConnection: void connect()> -> _SINK_
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<android.net.http.HttpResponseCache: java.io.OutputStream getBody()> -> _SINK_
<android.net.wifi.WifiManager: void startScan()> -> _SINK_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> -> _SINK_
<android.nfc.NfcAdapter: void enableForegroundDispatch()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])> -> _SINK_
<androidx.room.Dao: int delete(User)> -> _SINK_
<androidx.room.Dao: int update(User)> -> _SINK_
<androidx.room.Dao: long insert(User)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<io.realm.Realm: void executeTransaction(io.realm.Realm.Transaction)> -> _SINK_
<io.realm.Realm: void insert(io.realm.RealmModel)> -> _SINK_
<io.realm.Realm: void deleteAll()> -> _SINK_
<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> setValue(java.lang.Object)> -> _SINK_
<com.google.firebase.database.DatabaseReference: com.google.android.gms.tasks.Task<java.lang.Void> updateChildren(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> set(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<com.google.firebase.firestore.DocumentReference: com.google.android.gms.tasks.Task<java.lang.Void> update(java.util.Map<java.lang.String,java.lang.Object>)> -> _SINK_
<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<okhttp3.Call: void enqueue(okhttp3.Callback)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> postData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> putData(@Body okhttp3.RequestBody)> -> _SINK_
<retrofit2.Retrofit: retrofit2.Call<okhttp3.ResponseBody> deleteData(@Body okhttp3.RequestBody)> -> _SINK_
























